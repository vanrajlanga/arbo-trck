import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { toast } from "sonner";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
    Select,
    SelectContent,
    SelectItem,
    SelectTrigger,
    SelectValue,
} from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription } from "@/components/ui/alert";
import {
    Accordion,
    AccordionContent,
    AccordionItem,
    AccordionTrigger,
} from "@/components/ui/accordion";
import {
    Plus,
    X,
    ArrowLeft,
    Save,
    Info,
    Clock,
    DollarSign,
    FileText,
    Loader2,
    Eye,
    FolderOpen,
    Trash2,
    ArrowUp,
    Mountain,
    Calendar,
    MapPin,
    Route,
    Bed,
    Users,
    Activity,
    Camera,
    Shield,
    CheckCircle,
    Zap,
    Train,
    AlertCircle,
    UserCheck,
    Upload,
    Crown,
    Search,
    ChevronDown,
    ChevronUp,
} from "lucide-react";
import { apiVendor } from "@/lib/api";
import ActivitySelector from "@/components/trek/ActivitySelector";
import { api } from "@/lib/api";
import {
    format,
    differenceInDays,
    startOfYear,
    endOfYear,
    eachDayOfInterval,
    getDay,
    isSameDay,
} from "date-fns";

const initialFormData = {
    title: "",
    description: "",
    city_ids: [], // Changed from city_id to city_ids array
    duration: "",
    duration_days: "",
    duration_nights: "",
    start_date: "",
    end_date: "",
    base_price: "",
    max_participants: "",
    difficulty: "",
    trek_type: "mountain",
    category: "",
    meeting_point: "",
    short_description: "", // Added
    trekking_rules: "", // Added
    emergency_protocols: "", // Added
    organizer_notes: "", // Added
    inclusions: [],
    exclusions: [],
    cancellation_policy_id: "", // Changed from cancellation_policies array
    other_policies: [],
    activities: [],
    badge_id: null,
    // Discount fields
    has_discount: false,
    discount_type: "",
    discount_value: "",
    // Service Days fields (will be handled by batches table)
    selectedServiceDays: ["thursday", "friday", "saturday"],
    selectedServiceDates: [],
    autoGeneratedDates: [],
    // New fields for additional sections (will be handled by separate tables)
    trekStages: [
        {
            type: "boarding",
            time: "",
            ampm: "AM",
            destination: "",
            transport: "",
        },
        {
            type: "meeting",
            time: "",
            ampm: "AM",
            destination: "",
            transport: "",
        },
        {
            type: "return",
            time: "",
            ampm: "PM",
            destination: "Home Location",
            transport: "",
        },
    ],
    maxStages: 3,
    itineraryDays: [{ day: 1, activities: ["", "", "", "", ""] }],
    accommodations: [{ night: 1, location: "", type: "" }],
    selectedActivities: [],
    customActivities: [],
    selectedInclusions: [],
    customInclusions: [],
    customExclusions: [],
    media: [],
    // New fields from addnewtrek
    destination: "", // Destination display name
    destination_id: "", // Destination ID for form submission
    coverImage: null,
    assignedCaptain: "",
    selectedCities: [], // This will be mapped to city_ids
};

const TrekForm = ({ mode = "create", trekId = null }) => {
    const navigate = useNavigate();
    const [formData, setFormData] = useState(initialFormData);
    const [loading, setLoading] = useState(false);
    const [destinations, setDestinations] = useState([]);
    const [cities, setCities] = useState([]);
    const [states, setStates] = useState([]);
    const [cancellationPolicies, setCancellationPolicies] = useState([]);
    const [badges, setBadges] = useState([]);
    const [validationErrors, setValidationErrors] = useState({});
    const [backendErrors, setBackendErrors] = useState({});
    const [isDataLoaded, setIsDataLoaded] = useState(false);
    const [activeAccordion, setActiveAccordion] = useState(["basic-info"]);
    const [showCalendarView, setShowCalendarView] = useState(false);
    const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());
    const [destinationSuggestions, setDestinationSuggestions] = useState([]);
    const [destinationLoading, setDestinationLoading] = useState(false);
    const [policiesLoading, setPoliciesLoading] = useState(false);

    // Fetch cities, states, and cancellation policies from API on mount
    useEffect(() => {
        async function fetchData() {
            try {
                console.log("🚀 Starting to fetch data...");

                console.log("📡 Fetching cities...");
                const cityRes = await apiVendor.getCities({ status: "active" });
                console.log("📡 Cities response:", cityRes);

                console.log("📡 Fetching states...");
                const stateRes = await apiVendor.getStates();
                console.log("📡 States response:", stateRes);

                console.log("📡 Fetching cancellation policies...");
                setPoliciesLoading(true);
                const policyRes = await apiVendor.getCancellationPolicies();
                console.log("📡 Cancellation policies response:", policyRes);

                console.log("📡 Fetching badges...");
                const badgeRes = await apiVendor.getBadges({ is_active: true });
                console.log("📡 Badges response:", badgeRes);

                setCities(cityRes.data?.cities || []);
                setStates(stateRes.data || []);
                setCancellationPolicies(policyRes.data || []);
                setBadges(badgeRes.data || []);

                console.log("✅ All data fetched successfully");
            } catch (err) {
                console.error("❌ Error in fetchData:", err);
                if (
                    err.message === "Unauthorized" ||
                    err.message === "Invalid token"
                ) {
                    toast.error("Please log in to access vendor features");
                } else {
                    toast.error("Failed to load form data");
                }
            } finally {
                setPoliciesLoading(false);
            }
        }
        fetchData();
    }, []);

    // Load trek data for edit mode
    useEffect(() => {
        if (mode === "edit" && trekId) {
            loadTrek();
        }
    }, [mode, trekId]);

    // Auto-generate itinerary days when duration changes
    useEffect(() => {
        if (formData.duration_days && formData.duration_days > 0) {
            const newItineraryDays = generateItineraryDays(
                formData.duration_days
            );
            setFormData((prev) => ({
                ...prev,
                itineraryDays: newItineraryDays,
            }));
        }
    }, [formData.duration_days]);

    // Debug: Monitor formData changes
    useEffect(() => {
        console.log("📊 formData updated:", {
            destination: formData.destination,
            destination_id: formData.destination_id,
            destinationSuggestions: destinationSuggestions.length,
        });
    }, [formData.destination, formData.destination_id, destinationSuggestions]);

    // Auto-generate accommodations when duration changes
    useEffect(() => {
        if (formData.duration_days && formData.duration_days > 0) {
            const newAccommodations = generateAccommodations(
                formData.duration_days
            );
            setFormData((prev) => ({
                ...prev,
                accommodations: newAccommodations,
            }));
        }
    }, [formData.duration_days]);

    // Auto-populate service dates when service days are selected
    useEffect(() => {
        if (
            formData.selectedServiceDays &&
            formData.selectedServiceDays.length > 0 &&
            formData.selectedServiceDates.length === 0
        ) {
            console.log(
                "🔍 Debug - Auto-populating service dates based on selectedServiceDays:",
                formData.selectedServiceDays
            );

            // Generate upcoming slots for the next 4 weeks
            const upcomingSlots = getUpcomingSlots(
                formData.selectedServiceDays,
                parseInt(formData.duration_days) || 1
            );
            const upcomingDates = upcomingSlots.slice(0, 8).map((slot) => {
                // Convert "dd MMM yyyy" format to Date object
                const [day, month, year] = slot.startDate.split(" ");
                const monthIndex = new Date(`${month} 1, 2000`).getMonth();
                return new Date(parseInt(year), monthIndex, parseInt(day));
            });

            console.log("🔍 Debug - Generated upcoming dates:", upcomingDates);

            setFormData((prev) => ({
                ...prev,
                selectedServiceDates: upcomingDates,
            }));
        }
    }, [formData.selectedServiceDays, formData.duration_days]);

    // Close destination dropdown when clicking outside
    useEffect(() => {
        const handleClickOutside = (event) => {
            const destinationInput = document.getElementById("destination");
            const suggestionsDropdown = document.querySelector(
                '[data-suggestions="destination"]'
            );

            // Check if click is outside both the input and the suggestions dropdown
            if (
                destinationInput &&
                !destinationInput.contains(event.target) &&
                suggestionsDropdown &&
                !suggestionsDropdown.contains(event.target)
            ) {
                console.log("🖱️ Click outside detected, clearing suggestions");
                setDestinationSuggestions([]);
            }
        };

        document.addEventListener("mousedown", handleClickOutside);
        return () => {
            document.removeEventListener("mousedown", handleClickOutside);
        };
    }, []);

    // Cleanup object URLs when component unmounts
    useEffect(() => {
        return () => {
            // Revoke all object URLs to prevent memory leaks
            if (formData.media && formData.media.length > 0) {
                formData.media.forEach((image) => {
                    if (image.preview) {
                        URL.revokeObjectURL(image.preview);
                    }
                });
            }
        };
    }, []);

    const searchDestinations = async (searchTerm) => {
        console.log("🔍 searchDestinations called with:", searchTerm);
        try {
            setDestinationLoading(true);
            console.log("📡 Making API call to searchDestinations...");
            const response = await apiVendor.searchDestinations(searchTerm, 10);
            console.log("📡 API response:", response);
            if (response.success) {
                console.log(
                    "✅ Setting destination suggestions:",
                    response.data.destinations || []
                );
                setDestinationSuggestions(response.data.destinations || []);
            } else {
                console.log("❌ API call failed, clearing suggestions");
                setDestinationSuggestions([]);
            }
        } catch (error) {
            console.error("❌ Error searching destinations:", error);
            setDestinationSuggestions([]);
        } finally {
            setDestinationLoading(false);
            console.log("🏁 searchDestinations completed");
        }
    };

    const loadTrek = async () => {
        try {
            setLoading(true);
            const response = await apiVendor.getTrek(trekId);
            if (response.success) {
                const trekData = response.data;

                // Process activities to include activity details
                if (trekData.activities && trekData.activityDetails) {
                    trekData.activities = trekData.activityDetails.map(
                        (activity) => ({
                            id: activity.id,
                            name: activity.name,
                            category_name: activity.category_name,
                        })
                    );
                }

                setFormData(trekData);
                setIsDataLoaded(true);
            } else {
                toast.error("Failed to load trek data");
            }
        } catch (error) {
            console.error("Error loading trek:", error);
            toast.error("Failed to load trek data");
        } finally {
            setLoading(false);
        }
    };

    const handleInputChange = (field, value) => {
        console.log("🔄 handleInputChange called:", { field, value });
        setFormData((prev) => {
            const newData = {
                ...prev,
                [field]: value,
            };

            // Auto-calculate nights when days change
            if (field === "duration_days") {
                const days = parseInt(value) || 0;
                const nights = Math.max(0, days - 1); // Nights = Days - 1
                newData.duration_nights = nights;

                // Update duration string
                if (days > 0) {
                    newData.duration = `${days} Day${days > 1 ? "s" : ""}${
                        nights > 0
                            ? ` ${nights} Night${nights > 1 ? "s" : ""}`
                            : ""
                    }`;
                } else {
                    newData.duration = "";
                }
            }

            // Auto-calculate duration from start and end dates
            if (field === "start_date" || field === "end_date") {
                const startDate = newData.start_date
                    ? new Date(newData.start_date)
                    : null;
                const endDate = newData.end_date
                    ? new Date(newData.end_date)
                    : null;

                if (startDate && endDate && endDate >= startDate) {
                    const days = differenceInDays(endDate, startDate) + 1;
                    const nights = Math.max(0, days - 1);
                    newData.duration_days = days;
                    newData.duration_nights = nights;
                    newData.duration = `${days} Day${days > 1 ? "s" : ""}${
                        nights > 0
                            ? ` ${nights} Night${nights > 1 ? "s" : ""}`
                            : ""
                    }`;
                }
            }

            return newData;
        });
        setValidationErrors((prev) => ({
            ...prev,
            [field]: [],
        }));
        setBackendErrors((prev) => ({
            ...prev,
            [field]: [],
        }));
    };

    const handleSelectChange = (field, value) => {
        setFormData((prev) => ({
            ...prev,
            [field]: value,
        }));
        setValidationErrors((prev) => ({
            ...prev,
            [field]: [],
        }));
        setBackendErrors((prev) => ({
            ...prev,
            [field]: [],
        }));
    };

    const handleFileSelect = (file) => {
        // Validate file size (5MB)
        if (file.size > 5 * 1024 * 1024) {
            toast.error("File size must be less than 5MB");
            return;
        }
        // Validate file type
        if (!file.type.startsWith("image/")) {
            toast.error("Please select a valid image file");
            return;
        }
        // Validate file extension
        const allowedExtensions = ["jpg", "jpeg", "png", "webp"];
        const fileExtension = file.name.split(".").pop().toLowerCase();
        if (!allowedExtensions.includes(fileExtension)) {
            toast.error("Please select a valid image file (JPG, PNG, WebP)");
            return;
        }

        handleInputChange("coverImage", file);
        toast.success("Image selected successfully!");
    };

    const handleTrekImagesSelect = (event) => {
        const files = Array.from(event.target.files);

        // Check if adding these files would exceed the limit
        if (formData.media.length + files.length > 5) {
            toast.error("Maximum 5 images allowed");
            return;
        }

        const validFiles = [];
        const invalidFiles = [];

        files.forEach((file) => {
            // Validate file size (5MB)
            if (file.size > 5 * 1024 * 1024) {
                invalidFiles.push(
                    `${file.name} - File size must be less than 5MB`
                );
                return;
            }

            // Validate file type
            if (!file.type.startsWith("image/")) {
                invalidFiles.push(
                    `${file.name} - Please select a valid image file`
                );
                return;
            }

            // Validate file extension
            const allowedExtensions = ["jpg", "jpeg", "png", "webp"];
            const fileExtension = file.name.split(".").pop().toLowerCase();
            if (!allowedExtensions.includes(fileExtension)) {
                invalidFiles.push(
                    `${file.name} - Please select a valid image file (JPG, PNG, WebP)`
                );
                return;
            }

            // Create preview URL
            const preview = URL.createObjectURL(file);
            validFiles.push({ file, preview });
        });

        // Show errors for invalid files
        if (invalidFiles.length > 0) {
            invalidFiles.forEach((error) => toast.error(error));
        }

        // Add valid files to form data
        if (validFiles.length > 0) {
            setFormData((prev) => ({
                ...prev,
                media: [...prev.media, ...validFiles],
            }));
            toast.success(`${validFiles.length} image(s) added successfully!`);
        }

        // Reset input
        event.target.value = "";
    };

    const handleRemoveTrekImage = (index) => {
        setFormData((prev) => {
            const newMedia = [...prev.media];
            // Revoke the object URL to free memory
            URL.revokeObjectURL(newMedia[index].preview);
            newMedia.splice(index, 1);
            return {
                ...prev,
                media: newMedia,
            };
        });
        toast.success("Image removed successfully!");
    };

    const handleTrekImagesDrop = (files) => {
        // Check if adding these files would exceed the limit
        if (formData.media.length + files.length > 5) {
            toast.error("Maximum 5 images allowed");
            return;
        }

        const validFiles = [];
        const invalidFiles = [];

        files.forEach((file) => {
            // Validate file size (5MB)
            if (file.size > 5 * 1024 * 1024) {
                invalidFiles.push(
                    `${file.name} - File size must be less than 5MB`
                );
                return;
            }

            // Validate file type
            if (!file.type.startsWith("image/")) {
                invalidFiles.push(
                    `${file.name} - Please select a valid image file`
                );
                return;
            }

            // Validate file extension
            const allowedExtensions = ["jpg", "jpeg", "png", "webp"];
            const fileExtension = file.name.split(".").pop().toLowerCase();
            if (!allowedExtensions.includes(fileExtension)) {
                invalidFiles.push(
                    `${file.name} - Please select a valid image file (JPG, PNG, WebP)`
                );
                return;
            }

            // Create preview URL
            const preview = URL.createObjectURL(file);
            validFiles.push({ file, preview });
        });

        // Show errors for invalid files
        if (invalidFiles.length > 0) {
            invalidFiles.forEach((error) => toast.error(error));
        }

        // Add valid files to form data
        if (validFiles.length > 0) {
            setFormData((prev) => ({
                ...prev,
                media: [...prev.media, ...validFiles],
            }));
            toast.success(`${validFiles.length} image(s) added successfully!`);
        }
    };

    const handleArrayChange = (arrayName, index, value) => {
        setFormData((prev) => ({
            ...prev,
            [arrayName]: prev[arrayName].map((item, i) =>
                i === index ? value : item
            ),
        }));
        setValidationErrors((prev) => ({
            ...prev,
            [arrayName]: prev[arrayName].map((item, i) =>
                i === index ? [] : []
            ),
        }));
        setBackendErrors((prev) => ({
            ...prev,
            [arrayName]: prev[arrayName].map((item, i) =>
                i === index ? [] : []
            ),
        }));
    };

    const handlePolicyChange = (arrayName, index, field, value) => {
        setFormData((prev) => ({
            ...prev,
            [arrayName]: prev[arrayName].map((policy, i) =>
                i === index ? { ...policy, [field]: value } : policy
            ),
        }));
        setValidationErrors((prev) => ({
            ...prev,
            [arrayName]: prev[arrayName].map((policy, i) =>
                i === index ? [] : []
            ),
        }));
        setBackendErrors((prev) => ({
            ...prev,
            [arrayName]: prev[arrayName].map((policy, i) =>
                i === index ? [] : []
            ),
        }));
    };

    const handlePolicyArrayChange = (
        arrayName,
        index,
        field,
        subIndex,
        value
    ) => {
        setFormData((prev) => ({
            ...prev,
            [arrayName]: prev[arrayName].map((policy, i) =>
                i === index
                    ? {
                          ...policy,
                          [field]: policy[field].map((item, j) =>
                              j === subIndex ? value : item
                          ),
                      }
                    : policy
            ),
        }));
        setValidationErrors((prev) => ({
            ...prev,
            [arrayName]: prev[arrayName].map((policy, i) =>
                i === index ? [] : []
            ),
        }));
        setBackendErrors((prev) => ({
            ...prev,
            [arrayName]: prev[arrayName].map((policy, i) =>
                i === index ? [] : []
            ),
        }));
    };

    const handleAddArrayItem = (arrayName, initialValue) => {
        setFormData((prev) => ({
            ...prev,
            [arrayName]: [...prev[arrayName], initialValue],
        }));
        setValidationErrors((prev) => ({
            ...prev,
            [arrayName]: [...(prev[arrayName] || []), []],
        }));
        setBackendErrors((prev) => ({
            ...prev,
            [arrayName]: [...(prev[arrayName] || []), []],
        }));
    };

    const handleRemoveArrayItem = (arrayName, index) => {
        setFormData((prev) => ({
            ...prev,
            [arrayName]: prev[arrayName].filter((_, i) => i !== index),
        }));
        setValidationErrors((prev) => ({
            ...prev,
            [arrayName]: (prev[arrayName] || []).filter((_, i) => i !== index),
        }));
        setBackendErrors((prev) => ({
            ...prev,
            [arrayName]: (prev[arrayName] || []).filter((_, i) => i !== index),
        }));
    };

    const handleAddPolicy = (arrayName) => {
        const newPolicy = {
            title: "",
            description: "",
            rules: [""],
            descriptionPoints: [""],
        };
        setFormData((prev) => ({
            ...prev,
            [arrayName]: [...prev[arrayName], newPolicy],
        }));
        setValidationErrors((prev) => ({
            ...prev,
            [arrayName]: [...(prev[arrayName] || []), []],
        }));
        setBackendErrors((prev) => ({
            ...prev,
            [arrayName]: [...(prev[arrayName] || []), []],
        }));
    };

    const handleRemovePolicyArrayItem = (arrayName, index, field, subIndex) => {
        setFormData((prev) => ({
            ...prev,
            [arrayName]: prev[arrayName].map((policy, i) =>
                i === index
                    ? {
                          ...policy,
                          [field]: policy[field].filter(
                              (_, j) => j !== subIndex
                          ),
                      }
                    : policy
            ),
        }));
    };

    const handleAddPolicyArrayItem = (
        arrayName,
        index,
        field,
        initialValue
    ) => {
        setFormData((prev) => ({
            ...prev,
            [arrayName]: prev[arrayName].map((policy, i) =>
                i === index
                    ? {
                          ...policy,
                          [field]: [...policy[field], initialValue],
                      }
                    : policy
            ),
        }));
    };

    const validateForm = () => {
        const errors = {};

        // Basic Info validation
        if (!formData.title?.trim()) {
            errors.title = ["Trek name is required"];
        }
        if (!formData.destination?.trim()) {
            errors.destination = ["Destination is required"];
        }
        if (!formData.destination_id) {
            errors.destination_id = [
                "Please select a destination from the list",
            ];
        }
        if (!formData.selectedCities || formData.selectedCities.length === 0) {
            errors.selectedCities = ["At least one city must be selected"];
        }
        if (!formData.media || formData.media.length === 0) {
            errors.media = ["At least one trek image is required"];
        }

        // Trek Classification validation
        if (!formData.trek_type) {
            errors.trek_type = ["Trek type is required"];
        }
        if (!formData.difficulty) {
            errors.difficulty = ["Difficulty level is required"];
        }
        if (!formData.max_participants || formData.max_participants <= 0) {
            errors.max_participants = [
                "Maximum participants must be greater than 0",
            ];
        }

        // Dates & Pricing validation
        if (!formData.duration_days || formData.duration_days <= 0) {
            errors.duration_days = ["Duration days must be greater than 0"];
        }
        if (!formData.duration_nights || formData.duration_nights < 0) {
            errors.duration_nights = ["Duration nights cannot be negative"];
        }
        if (!formData.base_price || formData.base_price <= 0) {
            errors.base_price = ["Base price must be greater than 0"];
        }

        // Meeting Information validation
        if (!formData.meeting_point?.trim()) {
            errors.meeting_point = ["Meeting point is required"];
        }

        // Cancellation Policy validation
        if (!formData.cancellation_policy_id) {
            errors.cancellation_policy_id = ["Cancellation policy is required"];
        }

        // Inclusions validation
        const inclusions = [
            ...formData.selectedInclusions,
            ...formData.customInclusions,
        ].filter((item) => item.trim() !== "");
        if (inclusions.length === 0) {
            errors.inclusions = ["At least one inclusion is required"];
        }

        // Discount validation
        if (formData.has_discount) {
            if (!formData.discount_type) {
                errors.discount_type = [
                    "Discount type is required when discount is enabled",
                ];
            }
            if (!formData.discount_value || formData.discount_value <= 0) {
                errors.discount_value = [
                    "Discount value must be greater than 0",
                ];
            }
            if (
                formData.discount_type === "percentage" &&
                formData.discount_value > 100
            ) {
                errors.discount_value = [
                    "Percentage discount cannot exceed 100%",
                ];
            }
        }

        // Trek Stages validation
        if (formData.maxStages < 3 || formData.maxStages > 10) {
            errors.maxStages = ["Number of stages must be between 3 and 10"];
        }

        const completedStages = getCompletedStages();
        if (completedStages.length < formData.trekStages.length) {
            errors.trekStages = [
                "All stages must have time, location, and transportation filled",
            ];
        }

        // Itinerary validation
        const hasItineraryActivities = formData.itineraryDays.every((day) =>
            day.activities.some((activity) => activity.trim() !== "")
        );
        if (!hasItineraryActivities) {
            errors.itineraryDays = ["Each day must have at least one activity"];
        }

        // Accommodations validation
        const hasAccommodations = formData.accommodations.every(
            (acc) => acc.location.trim() !== "" && acc.type !== ""
        );
        if (!hasAccommodations) {
            errors.accommodations = [
                "All accommodations must have location and type filled",
            ];
        }

        // Trek policies validation
        if (!formData.trekking_rules?.trim()) {
            errors.trekking_rules = ["Trekking rules are required"];
        }
        if (!formData.emergency_protocols?.trim()) {
            errors.emergency_protocols = ["Emergency protocols are required"];
        }

        if (!formData.trek_type) {
            toast.error("Trek type is required");
            return;
        }
        if (!formData.meeting_point?.trim()) {
            toast.error("Meeting point is required");
            return;
        }

        if (inclusions.length === 0) {
            toast.error("At least one inclusion is required");
            return;
        }
        if (!formData.cancellation_policy_id) {
            toast.error("Cancellation policy is required");
            return;
        }

        setValidationErrors(errors);
        return Object.keys(errors).length === 0;
    };

    const getFieldErrors = (fieldName) => {
        const localErrors = validationErrors[fieldName] || [];
        const serverErrors = backendErrors[fieldName] || [];
        return [...localErrors, ...serverErrors];
    };

    const hasFieldErrors = (fieldName) => {
        return getFieldErrors(fieldName).length > 0;
    };

    const handleSubmit = async (e) => {
        e.preventDefault();

        if (!validateForm()) {
            toast.error("Please fix the validation errors before submitting");
            return;
        }

        try {
            setLoading(true);
            setBackendErrors({});

            // Get the selected cancellation policy
            const selectedPolicy = cancellationPolicies.find(
                (policy) =>
                    policy.id === parseInt(formData.cancellation_policy_id)
            );

            // Prepare inclusions array
            const inclusions = [
                ...formData.selectedInclusions,
                ...formData.customInclusions,
            ].filter((item) => item.trim() !== "");

            // Prepare exclusions array
            const exclusions = formData.customExclusions.filter(
                (item) => item.trim() !== ""
            );

            // Prepare activities array (convert to IDs)
            const activities = (formData.activities || []).map(
                (activity) => activity.id
            );

            // Prepare cancellation policies array
            const cancellation_policies = selectedPolicy
                ? [
                      {
                          title: selectedPolicy.title,
                          description: selectedPolicy.description,
                          descriptionPoints:
                              selectedPolicy.description_points || [],
                          rules: selectedPolicy.rules || [],
                      },
                  ]
                : [];

            // Validate required fields before submission
            if (!formData.title?.trim()) {
                toast.error("Trek title is required");
                return;
            }
            if (!formData.destination_id) {
                toast.error("Destination is required");
                return;
            }
            if (!formData.duration_days || formData.duration_days <= 0) {
                toast.error("Duration days is required");
                return;
            }
            if (!formData.duration_nights || formData.duration_nights < 0) {
                toast.error("Duration nights is required");
                return;
            }
            if (!formData.base_price || formData.base_price <= 0) {
                toast.error("Base price is required");
                return;
            }
            if (!formData.max_participants || formData.max_participants <= 0) {
                toast.error("Maximum participants is required");
                return;
            }
            if (!formData.difficulty) {
                toast.error("Difficulty level is required");
                return;
            }
            if (!formData.trek_type) {
                toast.error("Trek type is required");
                return;
            }
            if (!formData.meeting_point?.trim()) {
                toast.error("Meeting point is required");
                return;
            }

            if (inclusions.length === 0) {
                toast.error("At least one inclusion is required");
                return;
            }
            if (cancellation_policies.length === 0) {
                toast.error("Cancellation policy is required");
                return;
            }

            // Prepare other policies array
            const other_policies = [];
            if (formData.trekking_rules?.trim()) {
                other_policies.push({
                    title: "Trekking Rules",
                    description: formData.trekking_rules,
                    descriptionPoints: [],
                    rules: [],
                });
            }
            if (formData.emergency_protocols?.trim()) {
                other_policies.push({
                    title: "Emergency Protocols",
                    description: formData.emergency_protocols,
                    descriptionPoints: [],
                    rules: [],
                });
            }
            if (formData.organizer_notes?.trim()) {
                other_policies.push({
                    title: "Organizer Notes",
                    description: formData.organizer_notes,
                    descriptionPoints: [],
                    rules: [],
                });
            }

            // Prepare trek stages data
            const trekStages = formData.trekStages.map((stage) => ({
                type: stage.type,
                time: stage.time,
                ampm: stage.ampm,
                destination: stage.destination,
                transport: stage.transport,
            }));

            // Prepare itinerary data
            const itineraryItems = formData.itineraryDays.map((day, index) => ({
                day: day.day,
                activities: day.activities.filter(
                    (activity) => activity.trim() !== ""
                ),
            }));

            // Prepare accommodations data
            const accommodations = formData.accommodations.map((acc) => ({
                night: acc.night,
                location: acc.location,
                type: acc.type,
            }));

            // Note: Images will be handled separately after trek creation
            // For now, we'll create the trek without images
            console.log(
                "📸 Images will be uploaded separately after trek creation"
            );

            // Store selected service dates for batch creation
            const selectedServiceDates = formData.selectedServiceDates || [];

            const submitData = {
                // Basic info
                title: formData.title,
                description: formData.description || formData.short_description,
                destination_id: parseInt(formData.destination_id),
                city_ids:
                    formData.selectedCities.length > 0
                        ? formData.selectedCities
                        : [],

                // Duration and pricing
                duration: `${formData.duration_days} days, ${formData.duration_nights} nights`,
                duration_days: parseInt(formData.duration_days),
                duration_nights: parseInt(formData.duration_nights),
                base_price: parseFloat(formData.base_price),
                maxParticipants: parseInt(formData.max_participants),

                // Trek details
                difficulty: formData.difficulty,
                trek_type: formData.trek_type,
                category: formData.category || "",

                // Meeting information
                meeting_point: formData.meeting_point || "",

                // New text fields
                short_description: formData.short_description || "",
                trekking_rules: formData.trekking_rules || "",
                emergency_protocols: formData.emergency_protocols || "",
                organizer_notes: formData.organizer_notes || "",

                // Arrays
                inclusions: inclusions,
                exclusions: exclusions,
                activities: activities,
                cancellation_policy_id: parseInt(
                    formData.cancellation_policy_id
                ),
                other_policies: other_policies,

                // Optional badge
                badge_id: formData.badge_id || null,

                // Discount
                has_discount: formData.has_discount || false,
                discount_type: formData.discount_type || null,
                discount_value: formData.discount_value
                    ? parseFloat(formData.discount_value)
                    : null,

                // Status
                status: "deactive", // Default to deactive, can be activated later

                // Note: trek_stages, itinerary_items, and accommodations will be handled separately
                // after trek creation through dedicated endpoints

                // Remove fields that are not part of the Trek model
                // These will be handled separately or stored differently
                selectedServiceDays: undefined,
                selectedServiceDates: undefined,
                autoGeneratedDates: undefined,
                maxStages: undefined,
                selectedActivities: undefined,
                customActivities: undefined,
                selectedInclusions: undefined,
                customInclusions: undefined,
                customExclusions: undefined,
                media: undefined,
                destination: undefined,
                region: undefined,
                coverImage: undefined,
                assignedCaptain: undefined,
                selectedCities: undefined,
            };

            console.log("🚀 Submitting trek data:", submitData);

            let response;
            if (mode === "create") {
                response = await apiVendor.createTrek(submitData);
            } else {
                response = await apiVendor.updateTrek(trekId, submitData);
            }

            if (response.success) {
                // Create batches if service dates are selected
                console.log(
                    "🔍 Debug - selectedServiceDates:",
                    selectedServiceDates
                );
                console.log(
                    "🔍 Debug - selectedServiceDates length:",
                    selectedServiceDates?.length
                );

                if (selectedServiceDates && selectedServiceDates.length > 0) {
                    try {
                        const trekId = response.data.id || trekId;
                        console.log(
                            "🔍 Debug - Creating batches for trek ID:",
                            trekId
                        );
                        console.log(
                            "🔍 Debug - Service dates:",
                            selectedServiceDates
                        );

                        const batchData = {
                            serviceDates: selectedServiceDates.map((date) =>
                                typeof date === "string"
                                    ? date
                                    : date.toISOString().split("T")[0]
                            ),
                            capacity: parseInt(formData.max_participants) || 20,
                        };

                        console.log(
                            "🔍 Debug - Batch data being sent:",
                            batchData
                        );

                        const batchResponse = await apiVendor.createBatches(
                            trekId,
                            batchData
                        );

                        if (batchResponse.success) {
                            toast.success(
                                `${
                                    mode === "create"
                                        ? "Trek created"
                                        : "Trek updated"
                                } and ${
                                    batchResponse.data.length
                                } batches created successfully!`
                            );
                        } else {
                            toast.success(
                                mode === "create"
                                    ? "Trek created successfully! (Batch creation failed)"
                                    : "Trek updated successfully! (Batch creation failed)"
                            );
                        }
                    } catch (batchError) {
                        console.error("Error creating batches:", batchError);
                        toast.success(
                            mode === "create"
                                ? "Trek created successfully! (Batch creation failed)"
                                : "Trek updated successfully! (Batch creation failed)"
                        );
                    }
                } else {
                    toast.success(
                        mode === "create"
                            ? "Trek created successfully!"
                            : "Trek updated successfully!"
                    );
                }
                navigate("/vendor/treks");
            } else {
                if (response.errors) {
                    setBackendErrors(response.errors);
                    toast.error("Please fix the errors and try again");
                } else {
                    toast.error(
                        response.message ||
                            (mode === "create"
                                ? "Failed to create trek"
                                : "Failed to update trek")
                    );
                }
            }
        } catch (error) {
            console.error("Error submitting form:", error);
            toast.error(
                mode === "create"
                    ? "Failed to create trek"
                    : "Failed to update trek"
            );
        } finally {
            setLoading(false);
        }
    };

    const handleSaveDraft = () => {
        const draftData = {
            ...formData,
            savedAt: new Date().toISOString(),
        };
        localStorage.setItem("trekDraft", JSON.stringify(draftData));
        toast.success("Draft saved successfully!");
    };

    const handleLoadDraft = () => {
        const draftData = localStorage.getItem("trekDraft");
        if (draftData) {
            try {
                const parsed = JSON.parse(draftData);
                setFormData(parsed);
                toast.success("Draft loaded successfully!");
            } catch (error) {
                toast.error("Failed to load draft");
            }
        } else {
            toast.error("No draft found");
        }
    };

    // Helper function to generate upcoming slots
    const getUpcomingSlots = (serviceDays, trekDuration) => {
        const slots = [];
        const today = new Date();
        const dayNames = [
            "sunday",
            "monday",
            "tuesday",
            "wednesday",
            "thursday",
            "friday",
            "saturday",
        ];

        // Generate slots for next 8 weeks
        for (let week = 0; week < 8; week++) {
            for (let day = 0; day < 7; day++) {
                const currentDate = new Date(today);
                currentDate.setDate(today.getDate() + week * 7 + day);

                const dayName = dayNames[currentDate.getDay()];

                if (serviceDays.includes(dayName)) {
                    const endDate = new Date(currentDate);
                    endDate.setDate(currentDate.getDate() + trekDuration - 1);

                    slots.push({
                        startDate: format(currentDate, "dd MMM yyyy"),
                        endDate: format(endDate, "dd MMM yyyy"),
                        duration: `${trekDuration} days`,
                        dayName: dayName,
                    });
                }
            }
        }

        return slots;
    };

    // Helper function to get all weekends for a specific year
    const getWeekendsOfYear = (
        year = new Date().getFullYear(),
        dayNumbers = [4, 5, 6]
    ) => {
        const weekends = [];
        const startDate = startOfYear(new Date(year, 0, 1));
        const endDate = endOfYear(new Date(year, 0, 1));

        const allDays = eachDayOfInterval({ start: startDate, end: endDate });

        allDays.forEach((date) => {
            if (dayNumbers.includes(getDay(date))) {
                weekends.push(date);
            }
        });

        return weekends;
    };

    // Helper function to auto-generate weekend slots
    const autoSelectWeekends = () => {
        const weekendDates = getWeekendsOfYear(selectedYear, [4, 5, 6]); // Thu, Fri, Sat
        console.log(
            "🔍 Debug - autoSelectWeekends called, weekendDates:",
            weekendDates
        );
        setFormData((prev) => {
            const newData = {
                ...prev,
                autoGeneratedDates: weekendDates,
                selectedServiceDates: weekendDates,
            };
            console.log(
                "🔍 Debug - Updated formData with selectedServiceDates:",
                newData.selectedServiceDates
            );
            return newData;
        });
        setShowCalendarView(true);
    };

    // Helper function to toggle a specific date
    const toggleServiceDate = (date) => {
        console.log("🔍 Debug - toggleServiceDate called with date:", date);
        setFormData((prev) => {
            const isSelected = prev.selectedServiceDates.some((d) =>
                isSameDay(new Date(d), date)
            );
            console.log("🔍 Debug - isSelected:", isSelected);
            console.log(
                "🔍 Debug - current selectedServiceDates:",
                prev.selectedServiceDates
            );

            let newSelectedDates;
            if (isSelected) {
                newSelectedDates = prev.selectedServiceDates.filter(
                    (d) => !isSameDay(new Date(d), date)
                );
            } else {
                newSelectedDates = [...prev.selectedServiceDates, date];
            }

            console.log(
                "🔍 Debug - new selectedServiceDates:",
                newSelectedDates
            );

            return {
                ...prev,
                selectedServiceDates: newSelectedDates,
            };
        });
    };

    // Helper function to check if a date is selected
    const isDateSelected = (date) => {
        return formData.selectedServiceDates.some((d) =>
            isSameDay(new Date(d), date)
        );
    };

    // Helper function to get calendar days for display
    const getCalendarDays = (year, month) => {
        const firstDay = new Date(year, month, 1);
        const lastDay = new Date(year, month + 1, 0);
        const startDate = new Date(firstDay);
        startDate.setDate(startDate.getDate() - firstDay.getDay());

        const days = [];
        const currentDate = new Date(startDate);

        for (let i = 0; i < 42; i++) {
            days.push(new Date(currentDate));
            currentDate.setDate(currentDate.getDate() + 1);
        }

        return days;
    };

    // Trek Stages helper functions
    const updateStageField = (stageIndex, field, value) => {
        setFormData((prev) => ({
            ...prev,
            trekStages: prev.trekStages.map((stage, index) =>
                index === stageIndex ? { ...stage, [field]: value } : stage
            ),
        }));
    };

    const updateStagesCount = (count) => {
        const newStages = [];

        // Always add boarding point as first stage
        newStages.push({
            type: "boarding",
            time: "",
            ampm: "AM",
            destination: "",
            transport: "",
        });

        // Add meeting stages in between
        for (let i = 1; i < count - 1; i++) {
            newStages.push({
                type: "meeting",
                time: "",
                ampm: "AM",
                destination: "",
                transport: "",
            });
        }

        // Always add return journey as last stage
        newStages.push({
            type: "return",
            time: "",
            ampm: "PM",
            destination: "Home Location",
            transport: "",
        });

        setFormData((prev) => ({
            ...prev,
            trekStages: newStages,
            maxStages: count,
        }));
    };

    const clearStageField = (stageIndex, field) => {
        updateStageField(stageIndex, field, "");
    };

    const getTransportIcon = (transport) => {
        switch (transport) {
            case "train":
                return "🚂";
            case "bus":
                return "🚌";
            case "minibus":
                return "🚐";
            case "car":
                return "🚗";
            default:
                return "";
        }
    };

    const getTransportLabel = (transport) => {
        switch (transport) {
            case "train":
                return "Train";
            case "bus":
                return "Bus";
            case "minibus":
                return "Mini bus/Car";
            case "car":
                return "Car";
            default:
                return "";
        }
    };

    const formatDateTime = (time, ampm) => {
        if (!time) return "";
        const [hours, minutes] = time.split(":");
        return `${hours}:${minutes} ${ampm}`;
    };

    const getCompletedStages = () => {
        return formData.trekStages.filter(
            (stage) => stage.time && stage.destination && stage.transport
        );
    };

    // Itinerary Days helper functions
    const updateItineraryDay = (dayIndex, activityIndex, value) => {
        setFormData((prev) => ({
            ...prev,
            itineraryDays: prev.itineraryDays.map((day, index) =>
                index === dayIndex
                    ? {
                          ...day,
                          activities: day.activities.map((activity, actIndex) =>
                              actIndex === activityIndex ? value : activity
                          ),
                      }
                    : day
            ),
        }));
    };

    const generateItineraryDays = (duration) => {
        if (!duration || duration <= 0)
            return [{ day: 1, activities: ["", "", "", "", ""] }];

        const days = [];
        for (let i = 1; i <= duration; i++) {
            days.push({
                day: i,
                activities: ["", "", "", "", ""],
            });
        }
        return days;
    };

    const addExtraItineraryDay = () => {
        setFormData((prev) => ({
            ...prev,
            itineraryDays: [
                ...prev.itineraryDays,
                {
                    day: prev.itineraryDays.length + 1,
                    activities: ["", "", "", "", ""],
                },
            ],
        }));
    };

    // Accommodations helper functions
    const updateAccommodationField = (accommodationIndex, field, value) => {
        setFormData((prev) => ({
            ...prev,
            accommodations: prev.accommodations.map((accommodation, index) =>
                index === accommodationIndex
                    ? { ...accommodation, [field]: value }
                    : accommodation
            ),
        }));
    };

    const generateAccommodations = (duration) => {
        if (!duration || duration <= 0)
            return [{ night: 1, location: "", type: "" }];

        const accommodations = [];
        for (let i = 1; i <= duration; i++) {
            accommodations.push({
                night: i,
                location: "",
                type: "",
            });
        }
        return accommodations;
    };

    const addExtraAccommodation = () => {
        setFormData((prev) => ({
            ...prev,
            accommodations: [
                ...prev.accommodations,
                {
                    night: prev.accommodations.length + 1,
                    location: "",
                    type: "",
                },
            ],
        }));
    };

    // Inclusions & Exclusions helper functions
    const addCustomInclusion = (item) => {
        if (item.trim() && !formData.customInclusions.includes(item.trim())) {
            setFormData((prev) => ({
                ...prev,
                customInclusions: [...prev.customInclusions, item.trim()],
            }));
        }
    };

    const removeCustomInclusion = (index) => {
        setFormData((prev) => ({
            ...prev,
            customInclusions: prev.customInclusions.filter(
                (_, i) => i !== index
            ),
        }));
    };

    const addCustomExclusion = (item) => {
        if (item.trim() && !formData.customExclusions.includes(item.trim())) {
            setFormData((prev) => ({
                ...prev,
                customExclusions: [...prev.customExclusions, item.trim()],
            }));
        }
    };

    const removeCustomExclusion = (index) => {
        setFormData((prev) => ({
            ...prev,
            customExclusions: prev.customExclusions.filter(
                (_, i) => i !== index
            ),
        }));
    };

    const toggleInclusion = (item, checked) => {
        if (checked) {
            setFormData((prev) => ({
                ...prev,
                selectedInclusions: [...prev.selectedInclusions, item],
            }));
        } else {
            setFormData((prev) => ({
                ...prev,
                selectedInclusions: prev.selectedInclusions.filter(
                    (inc) => inc !== item
                ),
            }));
        }
    };

    const calculateFormProgress = () => {
        const totalFields = 15; // Total number of required fields
        let completedFields = 0;

        // Basic Info
        if (formData.title?.trim()) completedFields++;
        if (formData.destination_id) completedFields++;
        if (formData.selectedCities?.length > 0) completedFields++;
        if (formData.media?.length > 0) completedFields++;

        // Trek Classification
        if (formData.trek_type) completedFields++;
        if (formData.difficulty) completedFields++;
        if (formData.max_participants > 0) completedFields++;

        // Dates & Pricing
        if (formData.duration_days > 0) completedFields++;
        if (formData.base_price > 0) completedFields++;
        if (formData.selectedServiceDays?.length > 0) completedFields++;
        if (formData.cancellation_policy_id) completedFields++;

        // Trek Policies
        if (formData.trekking_rules?.trim()) completedFields++;
        if (formData.emergency_protocols?.trim()) completedFields++;

        // Inclusions
        if (
            formData.selectedInclusions?.length > 0 ||
            formData.customInclusions?.length > 0
        )
            completedFields++;

        return Math.round((completedFields / totalFields) * 100);
    };

    const expandAllAccordions = () => {
        const allAccordionValues = [
            "basic-info",
            "dates-pricing",
            "stages",
            "itinerary",
            "logistics",
            "inclusions",
            "activities",
            "media",
            "policies",
            "review",
        ];
        setActiveAccordion(allAccordionValues);
    };

    const collapseAllAccordions = () => {
        setActiveAccordion([]);
    };

    const formProgress = calculateFormProgress();

    // Show loading spinner while fetching trek data
    if (loading) {
        return (
            <div className="flex justify-center items-center min-h-screen">
                <div className="text-center">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
                    <p className="text-gray-600">Loading trek details...</p>
                </div>
            </div>
        );
    }

    return (
        <div className="space-y-6 relative">
            <div className="flex justify-between items-center">
                <div>
                    <h1 className="text-3xl font-bold">
                        {mode === "create" ? "Create Trek" : "Edit Trek"}
                    </h1>
                    <p className="text-gray-600">
                        {mode === "create"
                            ? "Fill in the details to create a new trek"
                            : "Update the trek information"}
                    </p>
                </div>
                <div className="flex items-center gap-2">
                    <Button
                        variant="outline"
                        size="sm"
                        onClick={expandAllAccordions}
                        className="flex items-center gap-2"
                    >
                        <ChevronDown className="w-4 h-4" />
                        Expand All
                    </Button>
                    <Button
                        variant="outline"
                        size="sm"
                        onClick={collapseAllAccordions}
                        className="flex items-center gap-2"
                    >
                        <ChevronUp className="w-4 h-4" />
                        Collapse All
                    </Button>
                    <Button
                        variant="outline"
                        onClick={() => navigate("/vendor/treks")}
                    >
                        <ArrowLeft className="w-4 h-4 mr-2" />
                        Back to Treks
                    </Button>
                </div>
            </div>

            <form onSubmit={handleSubmit} className="space-y-6">
                <Accordion
                    type="multiple"
                    value={activeAccordion}
                    onValueChange={setActiveAccordion}
                    className="space-y-4"
                >
                    {/* 1. Basic Info */}
                    <Card>
                        <AccordionItem value="basic-info" className="border-0">
                            <AccordionTrigger className="text-lg font-semibold px-6 py-4">
                                <div className="flex items-center space-x-3 text-left">
                                    <MapPin className="w-5 h-5 text-blue-600" />
                                    <div>
                                        <div className="font-semibold">
                                            Basic Info
                                        </div>
                                        <div className="text-sm font-normal text-gray-500">
                                            Essential trek information and cover
                                            image
                                        </div>
                                    </div>
                                </div>
                            </AccordionTrigger>
                            <AccordionContent className="px-6 pb-6">
                                <div className="space-y-4">
                                    <div>
                                        <Label htmlFor="name">
                                            Trek Name *
                                        </Label>
                                        <Input
                                            id="name"
                                            name="name"
                                            value={formData.title}
                                            onChange={(e) =>
                                                handleInputChange(
                                                    "title",
                                                    e.target.value
                                                )
                                            }
                                            placeholder="Enter trek name"
                                            data-field="name"
                                            className={
                                                hasFieldErrors("title")
                                                    ? "border-red-500"
                                                    : ""
                                            }
                                        />
                                        {hasFieldErrors("title") && (
                                            <p className="text-red-500 text-xs mt-1">
                                                {getFieldErrors("title")[0]}
                                            </p>
                                        )}
                                    </div>

                                    <div>
                                        <Label htmlFor="destination">
                                            Destination *
                                        </Label>
                                        <div className="relative">
                                            <Input
                                                id="destination"
                                                name="destination"
                                                value={formData.destination}
                                                onChange={(e) => {
                                                    const value =
                                                        e.target.value;
                                                    console.log(
                                                        "🎯 Destination input onChange:",
                                                        {
                                                            value,
                                                            currentFormData:
                                                                formData,
                                                        }
                                                    );
                                                    handleInputChange(
                                                        "destination",
                                                        value
                                                    );
                                                    // Clear destination_id when user starts typing
                                                    if (
                                                        formData.destination_id
                                                    ) {
                                                        console.log(
                                                            "🧹 Clearing destination_id because user is typing"
                                                        );
                                                        handleInputChange(
                                                            "destination_id",
                                                            ""
                                                        );
                                                    }
                                                    if (value.length >= 2) {
                                                        console.log(
                                                            "🔍 Triggering search for:",
                                                            value
                                                        );
                                                        searchDestinations(
                                                            value
                                                        );
                                                    } else {
                                                        console.log(
                                                            "🗑️ Clearing suggestions (input too short)"
                                                        );
                                                        setDestinationSuggestions(
                                                            []
                                                        );
                                                    }
                                                }}
                                                onFocus={() => {
                                                    console.log(
                                                        "🎯 Destination input onFocus:",
                                                        {
                                                            currentDestination:
                                                                formData.destination,
                                                        }
                                                    );
                                                    // Show suggestions for current destination if it exists
                                                    if (
                                                        formData.destination
                                                            .length >= 2
                                                    ) {
                                                        console.log(
                                                            "🔍 Triggering search on focus for:",
                                                            formData.destination
                                                        );
                                                        searchDestinations(
                                                            formData.destination
                                                        );
                                                    }
                                                }}
                                                placeholder="Start typing to search destinations..."
                                                data-field="destination"
                                                className={
                                                    hasFieldErrors(
                                                        "destination"
                                                    )
                                                        ? "border-red-500 pr-10"
                                                        : "pr-10"
                                                }
                                            />
                                            <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                                                {destinationLoading ? (
                                                    <Loader2 className="h-4 w-4 animate-spin text-gray-400" />
                                                ) : (
                                                    <ChevronDown className="h-4 w-4 text-gray-400" />
                                                )}
                                            </div>

                                            {/* Autocomplete Dropdown */}
                                            {destinationSuggestions.length >
                                                0 && (
                                                <div
                                                    className="absolute z-50 w-full mt-1 bg-white border border-gray-200 rounded-md shadow-lg max-h-60 overflow-y-auto"
                                                    data-suggestions="destination"
                                                >
                                                    {destinationSuggestions.map(
                                                        (dest) => (
                                                            <div
                                                                key={dest.id}
                                                                className="px-4 py-2 hover:bg-gray-100 cursor-pointer border-b border-gray-100 last:border-b-0"
                                                                onClick={() => {
                                                                    console.log(
                                                                        "👆 Destination suggestion clicked:",
                                                                        dest
                                                                    );
                                                                    handleInputChange(
                                                                        "destination",
                                                                        dest.name
                                                                    );
                                                                    handleInputChange(
                                                                        "destination_id",
                                                                        dest.id
                                                                    );
                                                                    setDestinationSuggestions(
                                                                        []
                                                                    );
                                                                    // Blur the input to ensure value is displayed
                                                                    document
                                                                        .getElementById(
                                                                            "destination"
                                                                        )
                                                                        ?.blur();
                                                                    console.log(
                                                                        "✅ Destination selection completed"
                                                                    );
                                                                }}
                                                            >
                                                                <div className="flex items-center justify-between">
                                                                    <div>
                                                                        <p className="font-medium text-gray-900">
                                                                            {
                                                                                dest.name
                                                                            }
                                                                        </p>
                                                                        {dest.state && (
                                                                            <p className="text-sm text-gray-500">
                                                                                {
                                                                                    dest.state
                                                                                }
                                                                            </p>
                                                                        )}
                                                                    </div>
                                                                    {dest.isPopular && (
                                                                        <Badge className="bg-orange-100 text-orange-800 text-xs">
                                                                            Popular
                                                                        </Badge>
                                                                    )}
                                                                </div>
                                                            </div>
                                                        )
                                                    )}
                                                </div>
                                            )}
                                        </div>
                                        {hasFieldErrors("destination") && (
                                            <p className="text-red-500 text-xs mt-1">
                                                {
                                                    getFieldErrors(
                                                        "destination"
                                                    )[0]
                                                }
                                            </p>
                                        )}
                                        {hasFieldErrors("destination_id") && (
                                            <p className="text-red-500 text-xs mt-1">
                                                {
                                                    getFieldErrors(
                                                        "destination_id"
                                                    )[0]
                                                }
                                            </p>
                                        )}
                                    </div>

                                    <div>
                                        <Label htmlFor="shortDescription">
                                            Short Description (Optional)
                                        </Label>
                                        <Textarea
                                            id="shortDescription"
                                            name="shortDescription"
                                            value={formData.short_description}
                                            onChange={(e) =>
                                                handleInputChange(
                                                    "short_description",
                                                    e.target.value
                                                )
                                            }
                                            placeholder="Brief description that captures the essence of your trek (optional)"
                                            rows={3}
                                            data-field="shortDescription"
                                            className={
                                                hasFieldErrors(
                                                    "shortDescription"
                                                )
                                                    ? "border-red-500"
                                                    : ""
                                            }
                                        />
                                        {hasFieldErrors("shortDescription") && (
                                            <p className="text-red-500 text-xs mt-1">
                                                {
                                                    getFieldErrors(
                                                        "shortDescription"
                                                    )[0]
                                                }
                                            </p>
                                        )}
                                    </div>

                                    {/* Trek Captain Assignment */}
                                    <Card className="border-2 border-blue-200 bg-gradient-to-br from-blue-50 to-indigo-50 relative">
                                        {/* Coming Soon Overlay */}
                                        <div className="absolute inset-0 bg-white/80 backdrop-blur-sm z-10 flex items-center justify-center rounded-lg">
                                            <div className="text-center p-6">
                                                <div className="bg-blue-100 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4">
                                                    <UserCheck className="h-8 w-8 text-blue-600" />
                                                </div>
                                                <h3 className="text-lg font-semibold text-gray-800 mb-2">
                                                    Coming Soon
                                                </h3>
                                                <p className="text-sm text-gray-600 mb-4">
                                                    Trek Captain assignment
                                                    feature will be available
                                                    soon.
                                                </p>
                                                <div className="inline-flex items-center gap-2 bg-blue-50 text-blue-700 px-3 py-1 rounded-full text-xs font-medium">
                                                    <Clock className="h-3 w-3" />
                                                    In Development
                                                </div>
                                            </div>
                                        </div>

                                        <CardHeader>
                                            <CardTitle className="text-lg flex items-center gap-2">
                                                <UserCheck className="h-5 w-5 text-blue-600" />
                                                Assign Trek Captain *
                                            </CardTitle>
                                            <p className="text-sm text-gray-600">
                                                Select an experienced trek
                                                leader for this adventure. You
                                                can change this anytime.
                                            </p>
                                        </CardHeader>
                                        <CardContent className="space-y-4">
                                            <div>
                                                <Label className="text-sm font-semibold text-gray-700">
                                                    Select Trek Captain
                                                </Label>
                                                <Select
                                                    value={
                                                        formData.assignedCaptain
                                                    }
                                                    onValueChange={(value) =>
                                                        handleSelectChange(
                                                            "assignedCaptain",
                                                            value
                                                        )
                                                    }
                                                    disabled
                                                >
                                                    <SelectTrigger className="mt-2 h-12 border-2 focus:border-blue-500">
                                                        <SelectValue placeholder="Choose a trek captain" />
                                                    </SelectTrigger>
                                                    <SelectContent>
                                                        <SelectItem value="1">
                                                            <div className="flex items-center justify-between w-full">
                                                                <div>
                                                                    <p className="font-medium">
                                                                        Rajesh
                                                                        Kumar
                                                                    </p>
                                                                    <p className="text-xs text-gray-500">
                                                                        8 years
                                                                        • 156
                                                                        treks
                                                                        led
                                                                    </p>
                                                                </div>
                                                                <div className="text-right">
                                                                    <div className="flex items-center gap-1">
                                                                        <span className="text-yellow-500">
                                                                            ★
                                                                        </span>
                                                                        <span className="text-sm font-medium">
                                                                            4.9
                                                                        </span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </SelectItem>
                                                        <SelectItem value="2">
                                                            <div className="flex items-center justify-between w-full">
                                                                <div>
                                                                    <p className="font-medium">
                                                                        Priya
                                                                        Sharma
                                                                    </p>
                                                                    <p className="text-xs text-gray-500">
                                                                        5 years
                                                                        • 89
                                                                        treks
                                                                        led
                                                                    </p>
                                                                </div>
                                                                <div className="text-right">
                                                                    <div className="flex items-center gap-1">
                                                                        <span className="text-yellow-500">
                                                                            ★
                                                                        </span>
                                                                        <span className="text-sm font-medium">
                                                                            4.8
                                                                        </span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </SelectItem>
                                                        <SelectItem value="3">
                                                            <div className="flex items-center justify-between w-full">
                                                                <div>
                                                                    <p className="font-medium">
                                                                        Arjun
                                                                        Singh
                                                                    </p>
                                                                    <p className="text-xs text-gray-500">
                                                                        6 years
                                                                        • 124
                                                                        treks
                                                                        led
                                                                    </p>
                                                                </div>
                                                                <div className="text-right">
                                                                    <div className="flex items-center gap-1">
                                                                        <span className="text-yellow-500">
                                                                            ★
                                                                        </span>
                                                                        <span className="text-sm font-medium">
                                                                            4.7
                                                                        </span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </SelectItem>
                                                    </SelectContent>
                                                </Select>
                                            </div>
                                        </CardContent>
                                    </Card>

                                    {/* Location Management */}
                                    <Card className="border-2 border-green-200 bg-gradient-to-br from-green-50 to-emerald-50">
                                        <CardHeader>
                                            <CardTitle className="text-lg flex items-center gap-2">
                                                <MapPin className="h-5 w-5 text-green-600" />
                                                Trek Location & Coverage
                                            </CardTitle>
                                            <p className="text-sm text-gray-600">
                                                Select cities where this trek is
                                                available. Boarding points will
                                                auto-update based on selected
                                                locations.
                                            </p>
                                        </CardHeader>
                                        <CardContent className="space-y-4">
                                            <div>
                                                <Label className="text-sm font-semibold text-gray-700">
                                                    Available Cities *
                                                </Label>
                                                <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3 mt-3">
                                                    {cities.length > 0 ? (
                                                        cities.map((city) => (
                                                            <div
                                                                key={city.id}
                                                                className="flex items-center space-x-2"
                                                            >
                                                                <Checkbox
                                                                    id={`city-${city.id}`}
                                                                    checked={formData.selectedCities.includes(
                                                                        city.id
                                                                    )}
                                                                    onCheckedChange={(
                                                                        checked
                                                                    ) => {
                                                                        if (
                                                                            checked
                                                                        ) {
                                                                            setFormData(
                                                                                (
                                                                                    prev
                                                                                ) => ({
                                                                                    ...prev,
                                                                                    selectedCities:
                                                                                        [
                                                                                            ...prev.selectedCities,
                                                                                            city.id,
                                                                                        ],
                                                                                })
                                                                            );
                                                                        } else {
                                                                            setFormData(
                                                                                (
                                                                                    prev
                                                                                ) => ({
                                                                                    ...prev,
                                                                                    selectedCities:
                                                                                        prev.selectedCities.filter(
                                                                                            (
                                                                                                c
                                                                                            ) =>
                                                                                                c !==
                                                                                                city.id
                                                                                        ),
                                                                                })
                                                                            );
                                                                        }
                                                                    }}
                                                                />
                                                                <Label
                                                                    htmlFor={`city-${city.id}`}
                                                                    className="text-sm cursor-pointer"
                                                                >
                                                                    {
                                                                        city.cityName
                                                                    }
                                                                    {city.isPopular && (
                                                                        <Badge className="ml-1 bg-orange-100 text-orange-800 text-xs">
                                                                            Popular
                                                                        </Badge>
                                                                    )}
                                                                </Label>
                                                            </div>
                                                        ))
                                                    ) : (
                                                        <div className="col-span-full text-center py-4">
                                                            <div className="flex items-center justify-center gap-2 text-gray-500">
                                                                <Loader2 className="h-4 w-4 animate-spin" />
                                                                <span className="text-sm">
                                                                    Loading
                                                                    cities...
                                                                </span>
                                                            </div>
                                                        </div>
                                                    )}
                                                </div>
                                            </div>

                                            {formData.selectedCities.length >
                                                0 && (
                                                <div className="bg-white p-4 rounded-lg border-2 border-green-200">
                                                    <h4 className="font-semibold text-gray-800 mb-2">
                                                        Selected Cities:
                                                    </h4>
                                                    <div className="flex flex-wrap gap-2">
                                                        {formData.selectedCities.map(
                                                            (cityId) => {
                                                                const city =
                                                                    cities.find(
                                                                        (c) =>
                                                                            c.id ===
                                                                            cityId
                                                                    );
                                                                return (
                                                                    <Badge
                                                                        key={
                                                                            cityId
                                                                        }
                                                                        className="bg-green-100 text-green-800"
                                                                    >
                                                                        📍{" "}
                                                                        {city
                                                                            ? city.cityName
                                                                            : `City ${cityId}`}
                                                                    </Badge>
                                                                );
                                                            }
                                                        )}
                                                    </div>
                                                    <p className="text-xs text-gray-500 mt-2">
                                                        * Boarding points will
                                                        be automatically
                                                        suggested based on these
                                                        cities
                                                    </p>
                                                </div>
                                            )}
                                        </CardContent>
                                    </Card>

                                    <div>
                                        <Label htmlFor="region">
                                            State/Region (Optional)
                                        </Label>
                                        <Select
                                            value={formData.region}
                                            onValueChange={(value) =>
                                                handleSelectChange(
                                                    "region",
                                                    value
                                                )
                                            }
                                        >
                                            <SelectTrigger className="mt-2 h-12 border-2 focus:border-blue-500">
                                                <SelectValue placeholder="Select state or region" />
                                            </SelectTrigger>
                                            <SelectContent>
                                                {states.length > 0 ? (
                                                    states.map((state) => (
                                                        <SelectItem
                                                            key={state.id}
                                                            value={state.name.toLowerCase()}
                                                        >
                                                            {state.name}
                                                            {state.isPopular && (
                                                                <Badge className="ml-2 bg-orange-100 text-orange-800 text-xs">
                                                                    Popular
                                                                </Badge>
                                                            )}
                                                        </SelectItem>
                                                    ))
                                                ) : (
                                                    <div className="flex items-center justify-center gap-2 text-gray-500 p-4">
                                                        <Loader2 className="h-4 w-4 animate-spin" />
                                                        <span className="text-sm">
                                                            Loading states...
                                                        </span>
                                                    </div>
                                                )}
                                            </SelectContent>
                                        </Select>
                                    </div>

                                    <div>
                                        <Label className="text-sm font-semibold text-gray-700">
                                            Trek Cover Image *
                                        </Label>
                                        <div className="mt-2">
                                            {formData.coverImage ? (
                                                <div className="relative">
                                                    <img
                                                        src={
                                                            typeof formData.coverImage ===
                                                            "string"
                                                                ? formData.coverImage
                                                                : URL.createObjectURL(
                                                                      formData.coverImage
                                                                  )
                                                        }
                                                        alt="Trek Cover"
                                                        className="w-full h-48 object-cover rounded-lg border-2 border-blue-200"
                                                    />
                                                    <Button
                                                        type="button"
                                                        variant="destructive"
                                                        size="sm"
                                                        className="absolute top-2 right-2"
                                                        onClick={() =>
                                                            handleInputChange(
                                                                "coverImage",
                                                                null
                                                            )
                                                        }
                                                    >
                                                        <X className="h-4 w-4" />
                                                    </Button>
                                                    {formData.coverImage instanceof
                                                        File && (
                                                        <div className="absolute bottom-2 left-2 bg-black/70 text-white text-xs px-2 py-1 rounded">
                                                            {
                                                                formData
                                                                    .coverImage
                                                                    .name
                                                            }
                                                        </div>
                                                    )}
                                                </div>
                                            ) : (
                                                <div
                                                    className="border-2 border-dashed border-blue-300 rounded-xl p-8 text-center hover:border-blue-500 transition-colors bg-gradient-to-br from-blue-50 to-indigo-50"
                                                    onDragOver={(e) => {
                                                        e.preventDefault();
                                                        e.currentTarget.classList.add(
                                                            "border-blue-500",
                                                            "bg-blue-100"
                                                        );
                                                    }}
                                                    onDragLeave={(e) => {
                                                        e.preventDefault();
                                                        e.currentTarget.classList.remove(
                                                            "border-blue-500",
                                                            "bg-blue-100"
                                                        );
                                                    }}
                                                    onDrop={(e) => {
                                                        e.preventDefault();
                                                        e.currentTarget.classList.remove(
                                                            "border-blue-500",
                                                            "bg-blue-100"
                                                        );
                                                        const file =
                                                            e.dataTransfer
                                                                .files[0];
                                                        if (file) {
                                                            handleFileSelect(
                                                                file
                                                            );
                                                        }
                                                    }}
                                                >
                                                    <Upload className="h-12 w-12 mx-auto text-blue-500 mb-4" />
                                                    <p className="text-sm font-medium text-gray-700">
                                                        Click to upload or drag
                                                        and drop
                                                    </p>
                                                    <p className="text-xs text-gray-500 mt-1">
                                                        PNG, JPG up to 5MB •
                                                        Recommended: 1200x800px
                                                    </p>
                                                    <input
                                                        type="file"
                                                        id="coverImage"
                                                        accept="image/*"
                                                        className="hidden"
                                                        onChange={(e) => {
                                                            const file =
                                                                e.target
                                                                    .files[0];
                                                            if (file) {
                                                                handleFileSelect(
                                                                    file
                                                                );
                                                            }
                                                        }}
                                                    />
                                                    <Button
                                                        type="button"
                                                        className="mt-4 bg-blue-600 hover:bg-blue-700"
                                                        onClick={() =>
                                                            document
                                                                .getElementById(
                                                                    "coverImage"
                                                                )
                                                                .click()
                                                        }
                                                    >
                                                        Choose File
                                                    </Button>
                                                </div>
                                            )}
                                        </div>
                                        {hasFieldErrors("coverImage") && (
                                            <p className="text-red-500 text-xs mt-1">
                                                {
                                                    getFieldErrors(
                                                        "coverImage"
                                                    )[0]
                                                }
                                            </p>
                                        )}
                                    </div>
                                </div>
                            </AccordionContent>
                        </AccordionItem>
                    </Card>

                    {/* 2. Dates & Pricing */}
                    <Card>
                        <AccordionItem
                            value="dates-pricing"
                            className="border-0"
                        >
                            <AccordionTrigger className="text-lg font-semibold px-6 py-4">
                                <div className="flex items-center space-x-3 text-left">
                                    <DollarSign className="w-5 h-5 text-orange-600" />
                                    <div>
                                        <div className="font-semibold">
                                            Dates & Pricing
                                        </div>
                                        <div className="text-sm font-normal text-gray-500">
                                            Schedule and cost information
                                        </div>
                                    </div>
                                </div>
                            </AccordionTrigger>
                            <AccordionContent className="px-6 pb-6">
                                <div className="space-y-6">
                                    {/* Trek Duration Section */}
                                    <div>
                                        <h4 className="text-md font-medium mb-4">
                                            Trek Duration
                                        </h4>
                                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                            <div>
                                                <Label htmlFor="durationDays">
                                                    Number of Days *
                                                </Label>
                                                <Input
                                                    id="durationDays"
                                                    name="durationDays"
                                                    type="number"
                                                    value={
                                                        formData.duration_days
                                                    }
                                                    onChange={(e) =>
                                                        handleInputChange(
                                                            "duration_days",
                                                            parseInt(
                                                                e.target.value
                                                            )
                                                        )
                                                    }
                                                    placeholder="Enter days"
                                                    min="1"
                                                    data-field="duration_days"
                                                    className={
                                                        hasFieldErrors(
                                                            "duration_days"
                                                        )
                                                            ? "border-red-500"
                                                            : ""
                                                    }
                                                />
                                                {hasFieldErrors(
                                                    "duration_days"
                                                ) && (
                                                    <p className="text-red-500 text-xs mt-1">
                                                        {
                                                            getFieldErrors(
                                                                "duration_days"
                                                            )[0]
                                                        }
                                                    </p>
                                                )}
                                            </div>
                                            <div>
                                                <Label htmlFor="durationNights">
                                                    Number of Nights
                                                </Label>
                                                <Input
                                                    id="durationNights"
                                                    name="durationNights"
                                                    type="number"
                                                    value={
                                                        formData.duration_nights
                                                    }
                                                    readOnly
                                                    className="bg-gray-50"
                                                    placeholder="Auto-calculated"
                                                />
                                                <p className="text-xs text-gray-500 mt-1">
                                                    Automatically calculated
                                                    (Days - 1)
                                                </p>
                                            </div>
                                            <div>
                                                <Label htmlFor="duration">
                                                    Duration (Auto-generated)
                                                </Label>
                                                <Input
                                                    id="duration"
                                                    name="duration"
                                                    value={formData.duration}
                                                    readOnly
                                                    className="bg-gray-50"
                                                />
                                                <p className="text-xs text-gray-500 mt-1">
                                                    This field is automatically
                                                    generated based on days and
                                                    nights
                                                </p>
                                            </div>
                                        </div>
                                    </div>

                                    {/* Pricing Section */}
                                    <div>
                                        <h4 className="text-md font-medium mb-4">
                                            Pricing
                                        </h4>
                                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                            <div>
                                                <Label htmlFor="price">
                                                    Price per Person (₹) *
                                                </Label>
                                                <Input
                                                    id="price"
                                                    name="price"
                                                    type="number"
                                                    value={formData.base_price}
                                                    onChange={(e) =>
                                                        handleInputChange(
                                                            "base_price",
                                                            parseFloat(
                                                                e.target.value
                                                            ) || 0
                                                        )
                                                    }
                                                    placeholder="Enter price"
                                                    min="0"
                                                    step="0.01"
                                                    data-field="base_price"
                                                    className={
                                                        hasFieldErrors(
                                                            "base_price"
                                                        )
                                                            ? "border-red-500"
                                                            : ""
                                                    }
                                                />
                                                {hasFieldErrors(
                                                    "base_price"
                                                ) && (
                                                    <p className="text-red-500 text-xs mt-1">
                                                        {
                                                            getFieldErrors(
                                                                "base_price"
                                                            )[0]
                                                        }
                                                    </p>
                                                )}
                                            </div>
                                        </div>
                                    </div>

                                    {/* Discount Section */}
                                    <div>
                                        <h4 className="text-md font-medium mb-4">
                                            Discount Settings
                                        </h4>
                                        <div className="space-y-4">
                                            <div className="flex items-center space-x-2">
                                                <Checkbox
                                                    id="hasDiscount"
                                                    checked={
                                                        formData.has_discount
                                                    }
                                                    onCheckedChange={(
                                                        checked
                                                    ) =>
                                                        handleInputChange(
                                                            "has_discount",
                                                            checked
                                                        )
                                                    }
                                                />
                                                <Label htmlFor="hasDiscount">
                                                    Has Discount
                                                </Label>
                                            </div>

                                            {formData.has_discount && (
                                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                                    <div>
                                                        <Label htmlFor="discountType">
                                                            Discount Type
                                                        </Label>
                                                        <Select
                                                            value={
                                                                formData.discount_type
                                                            }
                                                            onValueChange={(
                                                                value
                                                            ) =>
                                                                handleSelectChange(
                                                                    "discount_type",
                                                                    value
                                                                )
                                                            }
                                                        >
                                                            <SelectTrigger>
                                                                <SelectValue placeholder="Select discount type" />
                                                            </SelectTrigger>
                                                            <SelectContent>
                                                                <SelectItem value="percentage">
                                                                    Percentage
                                                                    (%)
                                                                </SelectItem>
                                                                <SelectItem value="fixed">
                                                                    Fixed Amount
                                                                    (₹)
                                                                </SelectItem>
                                                            </SelectContent>
                                                        </Select>
                                                        {hasFieldErrors(
                                                            "discount_type"
                                                        ) && (
                                                            <p className="text-red-500 text-xs mt-1">
                                                                {
                                                                    getFieldErrors(
                                                                        "discount_type"
                                                                    )[0]
                                                                }
                                                            </p>
                                                        )}
                                                    </div>
                                                    <div>
                                                        <Label htmlFor="discountValue">
                                                            Discount Value
                                                        </Label>
                                                        <Input
                                                            id="discountValue"
                                                            name="discountValue"
                                                            type="number"
                                                            value={
                                                                formData.discount_value
                                                            }
                                                            onChange={(e) =>
                                                                handleInputChange(
                                                                    "discount_value",
                                                                    parseFloat(
                                                                        e.target
                                                                            .value
                                                                    ) || 0
                                                                )
                                                            }
                                                            placeholder={
                                                                formData.discount_type ===
                                                                "percentage"
                                                                    ? "Enter percentage"
                                                                    : "Enter amount"
                                                            }
                                                            min="0"
                                                            max={
                                                                formData.discount_type ===
                                                                "percentage"
                                                                    ? "100"
                                                                    : undefined
                                                            }
                                                            step="0.01"
                                                        />
                                                        <p className="text-xs text-gray-500 mt-1">
                                                            {formData.discount_type ===
                                                            "percentage"
                                                                ? "Enter percentage (0-100)"
                                                                : "Enter discount amount in ₹"}
                                                        </p>
                                                        {hasFieldErrors(
                                                            "discount_value"
                                                        ) && (
                                                            <p className="text-red-500 text-xs mt-1">
                                                                {
                                                                    getFieldErrors(
                                                                        "discount_value"
                                                                    )[0]
                                                                }
                                                            </p>
                                                        )}
                                                    </div>
                                                </div>
                                            )}
                                        </div>
                                    </div>

                                    {/* Meeting Information Section */}
                                    <div>
                                        <h4 className="text-md font-medium mb-4">
                                            Meeting Information
                                        </h4>
                                        <p className="text-sm text-gray-600 mb-4">
                                            Meeting point can be derived from
                                            your selected cities, but you can
                                            specify additional details below.
                                        </p>
                                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                            <div>
                                                <Label htmlFor="meetingPoint">
                                                    Meeting Point *
                                                </Label>
                                                <Input
                                                    id="meetingPoint"
                                                    name="meetingPoint"
                                                    type="text"
                                                    value={
                                                        formData.meeting_point
                                                    }
                                                    onChange={(e) =>
                                                        handleInputChange(
                                                            "meeting_point",
                                                            e.target.value
                                                        )
                                                    }
                                                    placeholder="Enter meeting point location"
                                                    data-field="meeting_point"
                                                    className={
                                                        hasFieldErrors(
                                                            "meeting_point"
                                                        )
                                                            ? "border-red-500"
                                                            : ""
                                                    }
                                                />
                                                {hasFieldErrors(
                                                    "meeting_point"
                                                ) && (
                                                    <p className="text-red-500 text-xs mt-1">
                                                        {
                                                            getFieldErrors(
                                                                "meeting_point"
                                                            )[0]
                                                        }
                                                    </p>
                                                )}
                                            </div>
                                        </div>
                                    </div>

                                    {/* Trek CTAs & Badges */}
                                    <div>
                                        <h4 className="text-md font-medium mb-4">
                                            Trek CTAs & Badges
                                        </h4>
                                        <p className="text-sm text-gray-600 mb-4">
                                            Select badges that apply to this
                                            trek to help users understand its
                                            characteristics:
                                        </p>
                                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                                            {badges.map((badge) => (
                                                <div
                                                    key={badge.id}
                                                    className="flex items-center space-x-2 p-3 border rounded-lg hover:bg-gray-50 transition-colors"
                                                >
                                                    <Checkbox
                                                        id={`badge-${badge.id}`}
                                                        checked={
                                                            formData.badge_id ===
                                                            badge.id
                                                        }
                                                        onCheckedChange={(
                                                            checked
                                                        ) =>
                                                            handleSelectChange(
                                                                "badge_id",
                                                                checked
                                                                    ? badge.id
                                                                    : null
                                                            )
                                                        }
                                                        className="data-[state=checked]:bg-green-600 data-[state=checked]:border-green-600"
                                                    />
                                                    <Label
                                                        htmlFor={`badge-${badge.id}`}
                                                        className="flex items-center space-x-2 cursor-pointer flex-1"
                                                    >
                                                        <span
                                                            className="text-lg"
                                                            style={{
                                                                color: badge.color,
                                                            }}
                                                        >
                                                            {badge.icon}
                                                        </span>
                                                        <div className="flex-1">
                                                            <div className="font-medium text-sm">
                                                                {badge.name}
                                                            </div>
                                                            <div className="text-xs text-gray-500">
                                                                {
                                                                    badge.description
                                                                }
                                                            </div>
                                                        </div>
                                                    </Label>
                                                </div>
                                            ))}
                                        </div>
                                        {badges.length === 0 && (
                                            <div className="text-center py-4 text-gray-500">
                                                <Crown className="w-8 h-8 mx-auto mb-2 text-gray-300" />
                                                <p className="text-sm">
                                                    No badges available
                                                </p>
                                            </div>
                                        )}
                                    </div>

                                    {/* Service Days & Auto-Slot Reservation */}
                                    <div>
                                        <h4 className="text-md font-medium mb-4">
                                            Service Days & Auto-Slot Reservation
                                        </h4>
                                        <div className="space-y-6">
                                            {!showCalendarView ? (
                                                <>
                                                    <div>
                                                        <Label className="text-sm font-semibold text-gray-700">
                                                            Select Your
                                                            Operating Days *
                                                        </Label>
                                                        <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-7 gap-3 mt-3">
                                                            {[
                                                                {
                                                                    id: "monday",
                                                                    label: "Mon",
                                                                    popular: false,
                                                                },
                                                                {
                                                                    id: "tuesday",
                                                                    label: "Tue",
                                                                    popular: false,
                                                                },
                                                                {
                                                                    id: "wednesday",
                                                                    label: "Wed",
                                                                    popular: false,
                                                                },
                                                                {
                                                                    id: "thursday",
                                                                    label: "Thu",
                                                                    popular: true,
                                                                },
                                                                {
                                                                    id: "friday",
                                                                    label: "Fri",
                                                                    popular: true,
                                                                },
                                                                {
                                                                    id: "saturday",
                                                                    label: "Sat",
                                                                    popular: true,
                                                                },
                                                                {
                                                                    id: "sunday",
                                                                    label: "Sun",
                                                                    popular: false,
                                                                },
                                                            ].map((day) => (
                                                                <div
                                                                    key={day.id}
                                                                    className="relative"
                                                                >
                                                                    <div className="flex items-center space-x-2">
                                                                        <Checkbox
                                                                            id={
                                                                                day.id
                                                                            }
                                                                            checked={formData.selectedServiceDays.includes(
                                                                                day.id
                                                                            )}
                                                                            onCheckedChange={(
                                                                                checked
                                                                            ) => {
                                                                                if (
                                                                                    checked
                                                                                ) {
                                                                                    setFormData(
                                                                                        (
                                                                                            prev
                                                                                        ) => ({
                                                                                            ...prev,
                                                                                            selectedServiceDays:
                                                                                                [
                                                                                                    ...prev.selectedServiceDays,
                                                                                                    day.id,
                                                                                                ],
                                                                                        })
                                                                                    );
                                                                                } else {
                                                                                    setFormData(
                                                                                        (
                                                                                            prev
                                                                                        ) => ({
                                                                                            ...prev,
                                                                                            selectedServiceDays:
                                                                                                prev.selectedServiceDays.filter(
                                                                                                    (
                                                                                                        d
                                                                                                    ) =>
                                                                                                        d !==
                                                                                                        day.id
                                                                                                ),
                                                                                        })
                                                                                    );
                                                                                }
                                                                            }}
                                                                        />
                                                                        <Label
                                                                            htmlFor={
                                                                                day.id
                                                                            }
                                                                            className={`text-sm cursor-pointer ${
                                                                                day.popular
                                                                                    ? "font-semibold text-orange-700"
                                                                                    : ""
                                                                            }`}
                                                                        >
                                                                            {
                                                                                day.label
                                                                            }
                                                                        </Label>
                                                                    </div>
                                                                    {day.popular && (
                                                                        <Badge className="absolute -top-2 -right-2 bg-orange-100 text-orange-800 text-xs px-1 py-0">
                                                                            Popular
                                                                        </Badge>
                                                                    )}
                                                                </div>
                                                            ))}
                                                        </div>

                                                        {/* Quick Select Buttons */}
                                                        <div className="flex flex-wrap gap-2 mt-4">
                                                            <Button
                                                                type="button"
                                                                variant="outline"
                                                                size="sm"
                                                                onClick={() =>
                                                                    setFormData(
                                                                        (
                                                                            prev
                                                                        ) => ({
                                                                            ...prev,
                                                                            selectedServiceDays:
                                                                                [
                                                                                    "thursday",
                                                                                    "friday",
                                                                                    "saturday",
                                                                                ],
                                                                        })
                                                                    )
                                                                }
                                                                className="text-orange-600 border-orange-300 hover:bg-orange-50"
                                                            >
                                                                Weekend Package
                                                                (Thu-Sat)
                                                            </Button>
                                                            <Button
                                                                type="button"
                                                                variant="outline"
                                                                size="sm"
                                                                onClick={() =>
                                                                    setFormData(
                                                                        (
                                                                            prev
                                                                        ) => ({
                                                                            ...prev,
                                                                            selectedServiceDays:
                                                                                [
                                                                                    "friday",
                                                                                    "saturday",
                                                                                    "sunday",
                                                                                ],
                                                                        })
                                                                    )
                                                                }
                                                                className="text-orange-600 border-orange-300 hover:bg-orange-50"
                                                            >
                                                                Weekend
                                                                (Fri-Sun)
                                                            </Button>
                                                            <Button
                                                                type="button"
                                                                variant="outline"
                                                                size="sm"
                                                                onClick={() =>
                                                                    setFormData(
                                                                        (
                                                                            prev
                                                                        ) => ({
                                                                            ...prev,
                                                                            selectedServiceDays:
                                                                                [
                                                                                    "monday",
                                                                                    "tuesday",
                                                                                    "wednesday",
                                                                                    "thursday",
                                                                                    "friday",
                                                                                    "saturday",
                                                                                    "sunday",
                                                                                ],
                                                                        })
                                                                    )
                                                                }
                                                                className="text-orange-600 border-orange-300 hover:bg-orange-50"
                                                            >
                                                                All Days
                                                            </Button>
                                                        </div>
                                                        {validationErrors.selectedServiceDays && (
                                                            <div className="text-red-500 text-sm mt-2">
                                                                {validationErrors.selectedServiceDays.map(
                                                                    (
                                                                        error,
                                                                        index
                                                                    ) => (
                                                                        <div
                                                                            key={
                                                                                index
                                                                            }
                                                                        >
                                                                            {
                                                                                error
                                                                            }
                                                                        </div>
                                                                    )
                                                                )}
                                                            </div>
                                                        )}
                                                    </div>

                                                    {/* Auto-Select Weekends Feature */}
                                                    <div className="border-2 border-blue-200 bg-gradient-to-br from-blue-50 to-indigo-50 rounded-lg p-4">
                                                        <div className="flex items-center gap-2 mb-3">
                                                            <Zap className="h-4 w-4 text-blue-600" />
                                                            <h5 className="text-base font-semibold">
                                                                Auto-Generate
                                                                Year Schedule
                                                            </h5>
                                                        </div>
                                                        <p className="text-sm text-blue-700 mb-4">
                                                            Automatically select
                                                            all weekend slots
                                                            for the year with
                                                            calendar override
                                                            control.
                                                        </p>
                                                        <div className="flex items-center gap-4">
                                                            <div>
                                                                <Label className="text-sm font-medium">
                                                                    Select Year
                                                                </Label>
                                                                <Select
                                                                    value={selectedYear.toString()}
                                                                    onValueChange={(
                                                                        value
                                                                    ) =>
                                                                        setSelectedYear(
                                                                            Number.parseInt(
                                                                                value
                                                                            )
                                                                        )
                                                                    }
                                                                >
                                                                    <SelectTrigger className="w-32 mt-1 border-2 focus:border-blue-500">
                                                                        <SelectValue />
                                                                    </SelectTrigger>
                                                                    <SelectContent>
                                                                        {Array.from(
                                                                            {
                                                                                length: 3,
                                                                            },
                                                                            (
                                                                                _,
                                                                                i
                                                                            ) =>
                                                                                new Date().getFullYear() +
                                                                                i
                                                                        ).map(
                                                                            (
                                                                                year
                                                                            ) => (
                                                                                <SelectItem
                                                                                    key={
                                                                                        year
                                                                                    }
                                                                                    value={year.toString()}
                                                                                >
                                                                                    {
                                                                                        year
                                                                                    }
                                                                                </SelectItem>
                                                                            )
                                                                        )}
                                                                    </SelectContent>
                                                                </Select>
                                                            </div>
                                                            <div className="flex-1">
                                                                <Button
                                                                    type="button"
                                                                    onClick={
                                                                        autoSelectWeekends
                                                                    }
                                                                    className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 w-full"
                                                                >
                                                                    <Calendar className="h-4 w-4 mr-2" />
                                                                    Auto-Select
                                                                    All Weekends
                                                                    for{" "}
                                                                    {
                                                                        selectedYear
                                                                    }
                                                                </Button>
                                                            </div>
                                                        </div>
                                                        <div className="bg-white p-3 rounded-lg border border-blue-200 mt-4">
                                                            <p className="text-sm text-blue-700 font-medium mb-1">
                                                                What this does:
                                                            </p>
                                                            <ul className="text-xs text-blue-600 space-y-1">
                                                                <li>
                                                                    •
                                                                    Automatically
                                                                    selects all
                                                                    Thursdays,
                                                                    Fridays &
                                                                    Saturdays
                                                                    for{" "}
                                                                    {
                                                                        selectedYear
                                                                    }
                                                                </li>
                                                                <li>
                                                                    • Opens
                                                                    calendar
                                                                    view for
                                                                    manual date
                                                                    override
                                                                </li>
                                                                <li>
                                                                    • You can
                                                                    toggle OFF
                                                                    holidays or
                                                                    unavailable
                                                                    dates
                                                                </li>
                                                                <li>
                                                                    • You can
                                                                    toggle ON
                                                                    additional
                                                                    custom dates
                                                                </li>
                                                                <li>
                                                                    • Final
                                                                    selection
                                                                    will be
                                                                    saved to
                                                                    your trek
                                                                    schedule
                                                                </li>
                                                            </ul>
                                                        </div>
                                                    </div>

                                                    {/* Auto-Reserved Upcoming Slots */}
                                                    {formData
                                                        .selectedServiceDays
                                                        .length > 0 &&
                                                        formData.duration_days >
                                                            0 && (
                                                            <div className="border-2 border-orange-200 bg-gradient-to-br from-orange-50 to-amber-50 rounded-lg p-4">
                                                                <div className="flex items-center gap-2 mb-3">
                                                                    <Calendar className="h-4 w-4 text-orange-600" />
                                                                    <h5 className="text-base font-semibold">
                                                                        Auto-Reserved
                                                                        Upcoming
                                                                        Slots
                                                                    </h5>
                                                                </div>
                                                                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                                                                    {getUpcomingSlots(
                                                                        formData.selectedServiceDays,
                                                                        parseInt(
                                                                            formData.duration_days
                                                                        ) || 0
                                                                    )
                                                                        .slice(
                                                                            0,
                                                                            6
                                                                        )
                                                                        .map(
                                                                            (
                                                                                slot,
                                                                                index
                                                                            ) => (
                                                                                <div
                                                                                    key={
                                                                                        index
                                                                                    }
                                                                                    className="bg-gradient-to-r from-orange-100 to-amber-100 p-3 rounded-lg border border-orange-200"
                                                                                >
                                                                                    <div className="flex items-center justify-between">
                                                                                        <div>
                                                                                            <p className="font-medium text-gray-800">
                                                                                                {
                                                                                                    slot.startDate
                                                                                                }
                                                                                            </p>
                                                                                            <p className="text-sm text-gray-600">
                                                                                                to{" "}
                                                                                                {
                                                                                                    slot.endDate
                                                                                                }
                                                                                            </p>
                                                                                            <p className="text-xs text-orange-700">
                                                                                                {
                                                                                                    slot.duration
                                                                                                }
                                                                                            </p>
                                                                                        </div>
                                                                                        <Badge className="bg-green-100 text-green-800 text-xs">
                                                                                            Available
                                                                                        </Badge>
                                                                                    </div>
                                                                                </div>
                                                                            )
                                                                        )}
                                                                </div>
                                                                <p className="text-xs text-gray-500 mt-3">
                                                                    * Slots are
                                                                    automatically
                                                                    created for
                                                                    the next 8
                                                                    weeks based
                                                                    on your
                                                                    selected
                                                                    service days
                                                                </p>
                                                            </div>
                                                        )}
                                                </>
                                            ) : (
                                                /* Calendar View for Date Override */
                                                <div className="space-y-6">
                                                    <div className="flex items-center justify-between">
                                                        <div>
                                                            <h3 className="text-lg font-semibold text-gray-800">
                                                                Calendar
                                                                Override -{" "}
                                                                {selectedYear}
                                                            </h3>
                                                            <p className="text-sm text-gray-600">
                                                                {
                                                                    formData
                                                                        .selectedServiceDates
                                                                        .length
                                                                }{" "}
                                                                dates selected •
                                                                Click dates to
                                                                toggle on/off
                                                            </p>
                                                        </div>
                                                        <div className="flex gap-2">
                                                            <Button
                                                                type="button"
                                                                variant="outline"
                                                                onClick={() => {
                                                                    setShowCalendarView(
                                                                        false
                                                                    );
                                                                    setFormData(
                                                                        (
                                                                            prev
                                                                        ) => ({
                                                                            ...prev,
                                                                            selectedServiceDates:
                                                                                [],
                                                                            autoGeneratedDates:
                                                                                [],
                                                                        })
                                                                    );
                                                                }}
                                                            >
                                                                Cancel
                                                            </Button>
                                                            <Button
                                                                type="button"
                                                                className="bg-green-600 hover:bg-green-700"
                                                                onClick={() => {
                                                                    setShowCalendarView(
                                                                        false
                                                                    );
                                                                    toast.success(
                                                                        "Service dates saved successfully!"
                                                                    );
                                                                }}
                                                            >
                                                                Save Selected
                                                                Dates
                                                            </Button>
                                                        </div>
                                                    </div>

                                                    {/* Year Navigation */}
                                                    <div className="flex items-center justify-center gap-4">
                                                        <Button
                                                            type="button"
                                                            variant="outline"
                                                            size="sm"
                                                            onClick={() =>
                                                                setSelectedYear(
                                                                    (prev) =>
                                                                        prev - 1
                                                                )
                                                            }
                                                        >
                                                            ← {selectedYear - 1}
                                                        </Button>
                                                        <Badge className="bg-blue-100 text-blue-800 px-4 py-2 text-base font-semibold">
                                                            {selectedYear}
                                                        </Badge>
                                                        <Button
                                                            type="button"
                                                            variant="outline"
                                                            size="sm"
                                                            onClick={() =>
                                                                setSelectedYear(
                                                                    (prev) =>
                                                                        prev + 1
                                                                )
                                                            }
                                                        >
                                                            {selectedYear + 1} →
                                                        </Button>
                                                    </div>

                                                    {/* Calendar Grid */}
                                                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                                                        {Array.from(
                                                            { length: 12 },
                                                            (_, monthIndex) => (
                                                                <div
                                                                    key={
                                                                        monthIndex
                                                                    }
                                                                    className="border border-gray-200 rounded-lg"
                                                                >
                                                                    <div className="p-3 border-b bg-gray-50">
                                                                        <h4 className="text-sm font-semibold text-center">
                                                                            {new Date(
                                                                                selectedYear,
                                                                                monthIndex
                                                                            ).toLocaleDateString(
                                                                                "en-US",
                                                                                {
                                                                                    month: "long",
                                                                                }
                                                                            )}
                                                                        </h4>
                                                                    </div>
                                                                    <div className="p-2">
                                                                        <div className="grid grid-cols-7 gap-1 text-xs">
                                                                            {[
                                                                                "S",
                                                                                "M",
                                                                                "T",
                                                                                "W",
                                                                                "T",
                                                                                "F",
                                                                                "S",
                                                                            ].map(
                                                                                (
                                                                                    day,
                                                                                    i
                                                                                ) => (
                                                                                    <div
                                                                                        key={
                                                                                            i
                                                                                        }
                                                                                        className="text-center font-medium text-gray-500 p-1"
                                                                                    >
                                                                                        {
                                                                                            day
                                                                                        }
                                                                                    </div>
                                                                                )
                                                                            )}
                                                                            {getCalendarDays(
                                                                                selectedYear,
                                                                                monthIndex
                                                                            ).map(
                                                                                (
                                                                                    date,
                                                                                    dateIndex
                                                                                ) => {
                                                                                    const isCurrentMonth =
                                                                                        date.getMonth() ===
                                                                                        monthIndex;
                                                                                    const isSelected =
                                                                                        isDateSelected(
                                                                                            date
                                                                                        );
                                                                                    const isAutoGenerated =
                                                                                        formData.autoGeneratedDates.some(
                                                                                            (
                                                                                                d
                                                                                            ) =>
                                                                                                isSameDay(
                                                                                                    new Date(
                                                                                                        d
                                                                                                    ),
                                                                                                    date
                                                                                                )
                                                                                        );
                                                                                    const isPast =
                                                                                        date <
                                                                                        new Date();

                                                                                    return (
                                                                                        <button
                                                                                            key={
                                                                                                dateIndex
                                                                                            }
                                                                                            type="button"
                                                                                            disabled={
                                                                                                isPast
                                                                                            }
                                                                                            onClick={() =>
                                                                                                !isPast &&
                                                                                                toggleServiceDate(
                                                                                                    date
                                                                                                )
                                                                                            }
                                                                                            className={`p-1 text-xs rounded transition-colors ${
                                                                                                !isCurrentMonth
                                                                                                    ? "text-gray-300"
                                                                                                    : isPast
                                                                                                    ? "text-gray-400 cursor-not-allowed"
                                                                                                    : isSelected
                                                                                                    ? "bg-blue-500 text-white"
                                                                                                    : "hover:bg-gray-100"
                                                                                            } ${
                                                                                                isAutoGenerated
                                                                                                    ? "ring-2 ring-blue-300"
                                                                                                    : ""
                                                                                            }`}
                                                                                        >
                                                                                            {date.getDate()}
                                                                                        </button>
                                                                                    );
                                                                                }
                                                                            )}
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            )
                                                        )}
                                                    </div>
                                                </div>
                                            )}
                                        </div>
                                    </div>
                                </div>
                            </AccordionContent>
                        </AccordionItem>
                    </Card>

                    {/* 3. Trek Classification */}
                    <Card>
                        <AccordionItem
                            value="classification"
                            className="border-0"
                        >
                            <AccordionTrigger className="text-lg font-semibold px-6 py-4">
                                <div className="flex items-center space-x-3 text-left">
                                    <Mountain className="w-5 h-5 text-green-600" />
                                    <div>
                                        <div className="font-semibold">
                                            Trek Classification
                                        </div>
                                        <div className="text-sm font-normal text-gray-500">
                                            Type, difficulty, duration and group
                                            details
                                        </div>
                                    </div>
                                </div>
                            </AccordionTrigger>
                            <AccordionContent className="px-6 pb-6">
                                <div className="space-y-6">
                                    {/* Trek Type */}
                                    <div>
                                        <Label
                                            htmlFor="trekType"
                                            className="text-sm font-semibold text-gray-700"
                                        >
                                            Trek Type *
                                        </Label>
                                        <Select
                                            value={formData.trek_type}
                                            onValueChange={(value) =>
                                                handleSelectChange(
                                                    "trek_type",
                                                    value
                                                )
                                            }
                                        >
                                            <SelectTrigger className="mt-2 h-12 border-2 focus:border-green-500">
                                                <SelectValue placeholder="Select trek type" />
                                            </SelectTrigger>
                                            <SelectContent>
                                                <SelectItem value="mountain">
                                                    🏔️ Mountain
                                                </SelectItem>
                                                <SelectItem value="forest">
                                                    🌲 Forest
                                                </SelectItem>
                                                <SelectItem value="desert">
                                                    🏜️ Desert
                                                </SelectItem>
                                                <SelectItem value="coastal">
                                                    🏖️ Coastal
                                                </SelectItem>
                                                <SelectItem value="hill-station">
                                                    ⛰️ Hill Station
                                                </SelectItem>
                                                <SelectItem value="adventure">
                                                    🧗 Adventure
                                                </SelectItem>
                                            </SelectContent>
                                        </Select>
                                        {hasFieldErrors("trek_type") && (
                                            <p className="text-red-500 text-xs mt-1">
                                                {getFieldErrors("trek_type")[0]}
                                            </p>
                                        )}
                                    </div>

                                    {/* Difficulty Level */}
                                    <div>
                                        <Label
                                            htmlFor="difficulty"
                                            className="text-sm font-semibold text-gray-700"
                                        >
                                            Difficulty Level *
                                        </Label>
                                        <Select
                                            value={formData.difficulty}
                                            onValueChange={(value) =>
                                                handleSelectChange(
                                                    "difficulty",
                                                    value
                                                )
                                            }
                                        >
                                            <SelectTrigger className="mt-2 h-12 border-2 focus:border-green-500">
                                                <SelectValue placeholder="Select difficulty level" />
                                            </SelectTrigger>
                                            <SelectContent>
                                                <SelectItem value="easy">
                                                    🟢 Easy
                                                </SelectItem>
                                                <SelectItem value="moderate">
                                                    🟡 Moderate
                                                </SelectItem>
                                                <SelectItem value="hard">
                                                    🟠 Hard
                                                </SelectItem>
                                                <SelectItem value="expert">
                                                    🔴 Expert
                                                </SelectItem>
                                            </SelectContent>
                                        </Select>
                                        {hasFieldErrors("difficulty") && (
                                            <p className="text-red-500 text-xs mt-1">
                                                {
                                                    getFieldErrors(
                                                        "difficulty"
                                                    )[0]
                                                }
                                            </p>
                                        )}
                                    </div>

                                    {/* Duration (Auto-calculated) */}
                                    <div>
                                        <Label className="text-sm font-semibold text-gray-700">
                                            Duration (Auto-calculated)
                                        </Label>
                                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-2">
                                            <div>
                                                <Label
                                                    htmlFor="durationDays"
                                                    className="text-sm text-gray-600"
                                                >
                                                    Days
                                                </Label>
                                                <Input
                                                    id="durationDays"
                                                    type="number"
                                                    value={
                                                        formData.duration_days
                                                    }
                                                    onChange={(e) =>
                                                        handleInputChange(
                                                            "duration_days",
                                                            parseInt(
                                                                e.target.value
                                                            ) || 0
                                                        )
                                                    }
                                                    placeholder="Enter days"
                                                    min="1"
                                                    className="mt-1 h-12 border-2 focus:border-green-500"
                                                />
                                            </div>
                                            <div>
                                                <Label
                                                    htmlFor="durationNights"
                                                    className="text-sm text-gray-600"
                                                >
                                                    Nights
                                                </Label>
                                                <Input
                                                    id="durationNights"
                                                    type="number"
                                                    value={
                                                        formData.duration_nights
                                                    }
                                                    readOnly
                                                    className="mt-1 h-12 border-2 focus:border-green-500 bg-gray-50"
                                                    placeholder="Auto-calculated"
                                                />
                                            </div>
                                        </div>
                                        {formData.duration && (
                                            <div className="mt-3 p-3 bg-green-50 border border-green-200 rounded-lg">
                                                <p className="text-sm font-medium text-green-800">
                                                    Duration:{" "}
                                                    {formData.duration}
                                                </p>
                                            </div>
                                        )}
                                    </div>

                                    {/* Total Group Size */}
                                    <div>
                                        <Label
                                            htmlFor="maxParticipants"
                                            className="text-sm font-semibold text-gray-700"
                                        >
                                            Total Group Size *
                                        </Label>
                                        <Input
                                            id="maxParticipants"
                                            type="number"
                                            value={formData.max_participants}
                                            onChange={(e) =>
                                                handleInputChange(
                                                    "max_participants",
                                                    parseInt(e.target.value)
                                                )
                                            }
                                            placeholder="Enter maximum number of participants"
                                            min="1"
                                            className="mt-2 h-12 border-2 focus:border-green-500"
                                            data-field="max_participants"
                                        />
                                        {hasFieldErrors("max_participants") && (
                                            <p className="text-red-500 text-xs mt-1">
                                                {
                                                    getFieldErrors(
                                                        "max_participants"
                                                    )[0]
                                                }
                                            </p>
                                        )}
                                    </div>
                                </div>
                            </AccordionContent>
                        </AccordionItem>
                    </Card>

                    {/* 4. Trek Stages & Route */}
                    <Card>
                        <AccordionItem value="stages" className="border-0">
                            <AccordionTrigger className="text-lg font-semibold px-6 py-4">
                                <div className="flex items-center space-x-3 text-left">
                                    <Route className="w-5 h-5 text-purple-600" />
                                    <div>
                                        <div className="font-semibold">
                                            Trek Stages & Route
                                        </div>
                                        <div className="text-sm font-normal text-gray-500">
                                            Transportation stages and route
                                            planning
                                        </div>
                                    </div>
                                </div>
                            </AccordionTrigger>
                            <AccordionContent className="px-6 pb-6">
                                <div className="space-y-8">
                                    {/* Number of Stages */}
                                    <div className="bg-gradient-to-r from-purple-50 to-blue-50 p-6 rounded-xl border border-purple-200">
                                        <Label className="text-sm font-semibold text-gray-700">
                                            Number of Stages (3-10)
                                        </Label>
                                        <div className="flex items-center gap-4 mt-3">
                                            <Input
                                                type="number"
                                                min="3"
                                                max="10"
                                                value={formData.maxStages}
                                                onChange={(e) =>
                                                    setFormData((prev) => ({
                                                        ...prev,
                                                        maxStages:
                                                            Number.parseInt(
                                                                e.target.value
                                                            ) || 3,
                                                    }))
                                                }
                                                className={`w-20 h-10 border-2 focus:border-purple-500 ${
                                                    hasFieldErrors("maxStages")
                                                        ? "border-red-500"
                                                        : ""
                                                }`}
                                            />
                                            <Button
                                                type="button"
                                                onClick={() =>
                                                    updateStagesCount(
                                                        formData.maxStages
                                                    )
                                                }
                                                className="bg-purple-600 hover:bg-purple-700"
                                            >
                                                Update Stages
                                            </Button>
                                        </div>
                                        {hasFieldErrors("maxStages") && (
                                            <div className="mt-2">
                                                {getFieldErrors(
                                                    "maxStages"
                                                ).map((error, index) => (
                                                    <p
                                                        key={index}
                                                        className="text-sm text-red-600"
                                                    >
                                                        {error}
                                                    </p>
                                                ))}
                                            </div>
                                        )}
                                    </div>

                                    {/* Trek Stages */}
                                    <div className="space-y-6">
                                        <p className="text-sm text-gray-500">
                                            * Dates are auto-generated from the
                                            scheduling system.
                                        </p>
                                        {hasFieldErrors("trekStages") && (
                                            <Alert className="border-red-200 bg-red-50">
                                                <AlertCircle className="h-4 w-4 text-red-600" />
                                                <AlertDescription className="text-red-800">
                                                    {getFieldErrors(
                                                        "trekStages"
                                                    ).map((error, index) => (
                                                        <p key={index}>
                                                            {error}
                                                        </p>
                                                    ))}
                                                </AlertDescription>
                                            </Alert>
                                        )}
                                        {formData.trekStages.map(
                                            (stage, index) => (
                                                <Card
                                                    key={index}
                                                    className="border-2 border-purple-200 bg-gradient-to-br from-white to-purple-50"
                                                >
                                                    <CardHeader className="pb-4">
                                                        <CardTitle className="text-lg flex items-center gap-2">
                                                            {stage.type ===
                                                                "boarding" && (
                                                                <Train className="h-5 w-5 text-blue-600" />
                                                            )}
                                                            {stage.type ===
                                                                "meeting" && (
                                                                <MapPin className="h-5 w-5 text-green-600" />
                                                            )}
                                                            {stage.type ===
                                                                "return" && (
                                                                <ArrowLeft className="h-5 w-5 text-orange-600" />
                                                            )}
                                                            Stage {index + 1}:{" "}
                                                            {stage.type ===
                                                            "boarding"
                                                                ? "Boarding Point"
                                                                : stage.type ===
                                                                  "meeting"
                                                                ? "Next Stage"
                                                                : "Return Journey"}
                                                        </CardTitle>
                                                    </CardHeader>
                                                    <CardContent>
                                                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                                            {/* Time */}
                                                            <div>
                                                                <Label className="text-sm font-medium">
                                                                    Time
                                                                </Label>
                                                                <div className="flex gap-2 mt-1">
                                                                    <div className="relative flex-1">
                                                                        <Input
                                                                            type="time"
                                                                            value={
                                                                                stage.time
                                                                            }
                                                                            onChange={(
                                                                                e
                                                                            ) =>
                                                                                updateStageField(
                                                                                    index,
                                                                                    "time",
                                                                                    e
                                                                                        .target
                                                                                        .value
                                                                                )
                                                                            }
                                                                            className="border-2 focus:border-purple-500"
                                                                        />
                                                                        {stage.time && (
                                                                            <Button
                                                                                type="button"
                                                                                variant="ghost"
                                                                                size="sm"
                                                                                className="absolute right-1 top-1 h-8 w-8 p-0"
                                                                                onClick={() =>
                                                                                    clearStageField(
                                                                                        index,
                                                                                        "time"
                                                                                    )
                                                                                }
                                                                            >
                                                                                <X className="h-3 w-3" />
                                                                            </Button>
                                                                        )}
                                                                    </div>
                                                                    <Select
                                                                        value={
                                                                            stage.ampm ||
                                                                            "AM"
                                                                        }
                                                                        onValueChange={(
                                                                            value
                                                                        ) =>
                                                                            updateStageField(
                                                                                index,
                                                                                "ampm",
                                                                                value
                                                                            )
                                                                        }
                                                                    >
                                                                        <SelectTrigger className="w-20 border-2 focus:border-purple-500">
                                                                            <SelectValue />
                                                                        </SelectTrigger>
                                                                        <SelectContent>
                                                                            <SelectItem value="AM">
                                                                                AM
                                                                            </SelectItem>
                                                                            <SelectItem value="PM">
                                                                                PM
                                                                            </SelectItem>
                                                                        </SelectContent>
                                                                    </Select>
                                                                </div>
                                                            </div>

                                                            {/* Location/Destination */}
                                                            <div>
                                                                <Label className="text-sm font-medium">
                                                                    {stage.type ===
                                                                    "return"
                                                                        ? "Destination"
                                                                        : "Location"}
                                                                </Label>
                                                                <Input
                                                                    placeholder={
                                                                        stage.type ===
                                                                        "return"
                                                                            ? "Home Location"
                                                                            : "Enter location"
                                                                    }
                                                                    className="mt-1 border-2 focus:border-purple-500"
                                                                    readOnly={
                                                                        stage.type ===
                                                                        "return"
                                                                    }
                                                                    value={
                                                                        stage.type ===
                                                                        "return"
                                                                            ? "Home Location"
                                                                            : stage.destination ||
                                                                              ""
                                                                    }
                                                                    onChange={(
                                                                        e
                                                                    ) =>
                                                                        updateStageField(
                                                                            index,
                                                                            "destination",
                                                                            e
                                                                                .target
                                                                                .value
                                                                        )
                                                                    }
                                                                />
                                                            </div>

                                                            {/* Transportation */}
                                                            <div>
                                                                <Label className="text-sm font-medium">
                                                                    Transportation
                                                                </Label>
                                                                <Select
                                                                    value={
                                                                        stage.transport ||
                                                                        ""
                                                                    }
                                                                    onValueChange={(
                                                                        value
                                                                    ) =>
                                                                        updateStageField(
                                                                            index,
                                                                            "transport",
                                                                            value
                                                                        )
                                                                    }
                                                                >
                                                                    <SelectTrigger className="mt-1 border-2 focus:border-purple-500">
                                                                        <SelectValue placeholder="Select mode" />
                                                                    </SelectTrigger>
                                                                    <SelectContent>
                                                                        <SelectItem value="train">
                                                                            🚂
                                                                            Train
                                                                        </SelectItem>
                                                                        <SelectItem value="bus">
                                                                            🚌
                                                                            Bus
                                                                        </SelectItem>
                                                                        <SelectItem value="minibus">
                                                                            🚐
                                                                            Minibus
                                                                        </SelectItem>
                                                                        <SelectItem value="car">
                                                                            🚗
                                                                            Car
                                                                        </SelectItem>
                                                                    </SelectContent>
                                                                </Select>
                                                            </div>
                                                        </div>
                                                    </CardContent>
                                                </Card>
                                            )
                                        )}
                                    </div>

                                    {/* Live Preview */}
                                    {getCompletedStages().length > 0 && (
                                        <Card className="border-2 border-blue-200 bg-gradient-to-br from-blue-50 to-indigo-50">
                                            <CardHeader>
                                                <CardTitle className="text-lg flex items-center gap-2">
                                                    <Route className="h-5 w-5 text-blue-600" />
                                                    Trek Route Preview
                                                </CardTitle>
                                            </CardHeader>
                                            <CardContent>
                                                <div className="space-y-4">
                                                    {/* Boarding Point Header */}
                                                    <div className="border-b border-blue-200 pb-3">
                                                        <h3 className="font-bold text-lg text-gray-900">
                                                            Boarding Point
                                                        </h3>
                                                        <p className="text-gray-600">
                                                            {
                                                                getCompletedStages()[0]
                                                                    ?.destination
                                                            }
                                                        </p>
                                                        <p className="text-sm text-gray-500">
                                                            {
                                                                getCompletedStages()[0]
                                                                    ?.time
                                                            }{" "}
                                                            {
                                                                getCompletedStages()[0]
                                                                    ?.ampm
                                                            }
                                                        </p>
                                                    </div>

                                                    {/* Timeline */}
                                                    <div className="space-y-4">
                                                        {getCompletedStages().map(
                                                            (stage, index) => (
                                                                <div
                                                                    key={index}
                                                                    className="flex items-start gap-4"
                                                                >
                                                                    <div className="flex flex-col items-center">
                                                                        <div className="w-3 h-3 bg-blue-600 rounded-full"></div>
                                                                        {index <
                                                                            getCompletedStages()
                                                                                .length -
                                                                                1 && (
                                                                            <div className="w-0.5 h-8 bg-gray-300 mt-2"></div>
                                                                        )}
                                                                    </div>
                                                                    <div className="flex-1 min-w-0">
                                                                        <div className="flex items-center justify-between">
                                                                            <div>
                                                                                <p className="font-medium text-gray-900">
                                                                                    {
                                                                                        stage.destination
                                                                                    }
                                                                                </p>
                                                                                <p className="text-sm text-gray-500">
                                                                                    {formatDateTime(
                                                                                        stage.time,
                                                                                        stage.ampm
                                                                                    )}
                                                                                </p>
                                                                            </div>
                                                                            <div className="text-right">
                                                                                <p className="text-sm font-medium text-gray-700">
                                                                                    {getTransportLabel(
                                                                                        stage.transport
                                                                                    )}
                                                                                </p>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            )
                                                        )}
                                                    </div>
                                                </div>
                                            </CardContent>
                                        </Card>
                                    )}
                                </div>
                            </AccordionContent>
                        </AccordionItem>
                    </Card>

                    {/* 5. Day-wise Itinerary */}
                    <Card>
                        <AccordionItem value="itinerary" className="border-0">
                            <AccordionTrigger className="text-lg font-semibold px-6 py-4">
                                <div className="flex items-center space-x-3 text-left">
                                    <Clock className="w-5 h-5 text-indigo-600" />
                                    <div>
                                        <div className="font-semibold">
                                            Day-wise Itinerary
                                        </div>
                                        <div className="text-sm font-normal text-gray-500">
                                            Detailed daily activities (max 5
                                            points per day)
                                        </div>
                                    </div>
                                </div>
                            </AccordionTrigger>
                            <AccordionContent className="px-6 pb-6">
                                <div className="space-y-6">
                                    <Alert className="border-indigo-200 bg-indigo-50">
                                        <Clock className="h-4 w-4" />
                                        <AlertDescription>
                                            <strong>
                                                Auto-Generated Days:
                                            </strong>{" "}
                                            Day slots are automatically created
                                            based on your trek duration. Each
                                            day should include a title and
                                            detailed activities.
                                        </AlertDescription>
                                    </Alert>

                                    {hasFieldErrors("itineraryDays") && (
                                        <Alert className="border-red-200 bg-red-50">
                                            <AlertCircle className="h-4 w-4 text-red-600" />
                                            <AlertDescription className="text-red-800">
                                                {getFieldErrors(
                                                    "itineraryDays"
                                                ).map((error, index) => (
                                                    <p key={index}>{error}</p>
                                                ))}
                                            </AlertDescription>
                                        </Alert>
                                    )}

                                    {formData.itineraryDays.map(
                                        (day, dayIndex) => (
                                            <Card
                                                key={dayIndex}
                                                className="border-2 border-indigo-200 bg-gradient-to-br from-white to-indigo-50"
                                            >
                                                <CardHeader>
                                                    <CardTitle className="text-lg flex items-center gap-2">
                                                        <Clock className="h-5 w-5 text-indigo-600" />
                                                        Day {day.day} Itinerary
                                                    </CardTitle>
                                                </CardHeader>
                                                <CardContent>
                                                    <div className="space-y-4">
                                                        <div>
                                                            <Label className="text-sm font-medium">
                                                                Activities (Max
                                                                5 per day)
                                                            </Label>
                                                            <div className="space-y-3 mt-2">
                                                                {day.activities.map(
                                                                    (
                                                                        activity,
                                                                        activityIndex
                                                                    ) => (
                                                                        <div
                                                                            key={
                                                                                activityIndex
                                                                            }
                                                                        >
                                                                            <Input
                                                                                placeholder={`Activity ${
                                                                                    activityIndex +
                                                                                    1
                                                                                } (e.g., ${
                                                                                    activityIndex ===
                                                                                    0
                                                                                        ? "Pick up from base location"
                                                                                        : activityIndex ===
                                                                                          1
                                                                                        ? "Trek to checkpoint 1"
                                                                                        : activityIndex ===
                                                                                          2
                                                                                        ? "Lunch break at scenic spot"
                                                                                        : activityIndex ===
                                                                                          3
                                                                                        ? "Continue to camp site"
                                                                                        : "Set up camp & dinner"
                                                                                })`}
                                                                                className="border-2 focus:border-indigo-500"
                                                                                value={
                                                                                    activity
                                                                                }
                                                                                onChange={(
                                                                                    e
                                                                                ) =>
                                                                                    updateItineraryDay(
                                                                                        dayIndex,
                                                                                        activityIndex,
                                                                                        e
                                                                                            .target
                                                                                            .value
                                                                                    )
                                                                                }
                                                                            />
                                                                        </div>
                                                                    )
                                                                )}
                                                            </div>
                                                        </div>
                                                    </div>
                                                </CardContent>
                                            </Card>
                                        )
                                    )}

                                    {/* Manual Add Day Button (Backup option) */}
                                    <Card className="border-2 border-dashed border-indigo-300 bg-indigo-50/30">
                                        <CardContent className="p-6 text-center">
                                            <Button
                                                type="button"
                                                variant="outline"
                                                className="border-indigo-300 text-indigo-600 hover:bg-indigo-50 bg-transparent"
                                                onClick={addExtraItineraryDay}
                                            >
                                                <Plus className="h-4 w-4 mr-2" />
                                                Add Extra Day (Manual)
                                            </Button>
                                            <p className="text-xs text-gray-500 mt-2">
                                                Use this only if auto-generation
                                                doesn't match your trek duration
                                            </p>
                                        </CardContent>
                                    </Card>
                                </div>
                            </AccordionContent>
                        </AccordionItem>
                    </Card>

                    {/* 6. Stays & Accommodations */}
                    <Card>
                        <AccordionItem value="logistics" className="border-0">
                            <AccordionTrigger className="text-lg font-semibold px-6 py-4">
                                <div className="flex items-center space-x-3 text-left">
                                    <Bed className="w-5 h-5 text-teal-600" />
                                    <div>
                                        <div className="font-semibold">
                                            Stays & Accommodations
                                        </div>
                                        <div className="text-sm font-normal text-gray-500">
                                            Night-wise accommodation details
                                        </div>
                                    </div>
                                </div>
                            </AccordionTrigger>
                            <AccordionContent className="px-6 pb-6">
                                <div className="space-y-8">
                                    <Alert className="border-teal-200 bg-teal-50">
                                        <Bed className="h-4 w-4" />
                                        <AlertDescription>
                                            <strong>
                                                Night-wise Accommodations:
                                            </strong>{" "}
                                            Define where customers will stay
                                            each night based on your trek
                                            duration.
                                        </AlertDescription>
                                    </Alert>

                                    {hasFieldErrors("accommodations") && (
                                        <Alert className="border-red-200 bg-red-50">
                                            <AlertCircle className="h-4 w-4 text-red-600" />
                                            <AlertDescription className="text-red-800">
                                                {getFieldErrors(
                                                    "accommodations"
                                                ).map((error, index) => (
                                                    <p key={index}>{error}</p>
                                                ))}
                                            </AlertDescription>
                                        </Alert>
                                    )}

                                    <div className="space-y-6">
                                        {formData.accommodations.map(
                                            (accommodation, index) => (
                                                <Card
                                                    key={index}
                                                    className="border-2 border-teal-200 bg-gradient-to-br from-white to-teal-50"
                                                >
                                                    <CardHeader>
                                                        <CardTitle className="text-lg flex items-center gap-2">
                                                            <Bed className="h-5 w-5 text-teal-600" />
                                                            Night{" "}
                                                            {
                                                                accommodation.night
                                                            }{" "}
                                                            Accommodation
                                                        </CardTitle>
                                                    </CardHeader>
                                                    <CardContent>
                                                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                                            <div>
                                                                <Label className="text-sm font-semibold text-gray-700">
                                                                    Location *
                                                                </Label>
                                                                <Input
                                                                    placeholder="e.g., Base Camp, Mountain Lodge, Hotel Name"
                                                                    className="mt-2 h-12 border-2 focus:border-teal-500"
                                                                    value={
                                                                        accommodation.location ||
                                                                        ""
                                                                    }
                                                                    onChange={(
                                                                        e
                                                                    ) =>
                                                                        updateAccommodationField(
                                                                            index,
                                                                            "location",
                                                                            e
                                                                                .target
                                                                                .value
                                                                        )
                                                                    }
                                                                />
                                                            </div>
                                                            <div>
                                                                <Label className="text-sm font-semibold text-gray-700">
                                                                    Accommodation
                                                                    Type *
                                                                </Label>
                                                                <Select
                                                                    value={
                                                                        accommodation.type ||
                                                                        ""
                                                                    }
                                                                    onValueChange={(
                                                                        value
                                                                    ) =>
                                                                        updateAccommodationField(
                                                                            index,
                                                                            "type",
                                                                            value
                                                                        )
                                                                    }
                                                                >
                                                                    <SelectTrigger className="mt-2 h-12 border-2 focus:border-teal-500">
                                                                        <SelectValue placeholder="Select accommodation type" />
                                                                    </SelectTrigger>
                                                                    <SelectContent>
                                                                        <SelectItem value="tent">
                                                                            🏕️
                                                                            Tent
                                                                            Stay
                                                                        </SelectItem>
                                                                        <SelectItem value="hotel">
                                                                            🏨
                                                                            Hotel
                                                                        </SelectItem>
                                                                        <SelectItem value="guesthouse">
                                                                            🏠
                                                                            Guesthouse
                                                                        </SelectItem>
                                                                        <SelectItem value="homestay">
                                                                            🏡
                                                                            Homestay
                                                                        </SelectItem>
                                                                        <SelectItem value="houseboat">
                                                                            🛥️
                                                                            Houseboat
                                                                        </SelectItem>
                                                                        <SelectItem value="resort">
                                                                            🏖️
                                                                            Resort
                                                                        </SelectItem>
                                                                    </SelectContent>
                                                                </Select>
                                                            </div>
                                                        </div>
                                                    </CardContent>
                                                </Card>
                                            )
                                        )}
                                    </div>

                                    {/* Manual Add Accommodation Button (Backup option) */}
                                    <Card className="border-2 border-dashed border-teal-300 bg-teal-50/30">
                                        <CardContent className="p-6 text-center">
                                            <Button
                                                type="button"
                                                variant="outline"
                                                className="border-teal-300 text-teal-600 hover:bg-teal-50 bg-transparent"
                                                onClick={addExtraAccommodation}
                                            >
                                                <Plus className="h-4 w-4 mr-2" />
                                                Add Extra Night (Manual)
                                            </Button>
                                            <p className="text-xs text-gray-500 mt-2">
                                                Use this only if auto-generation
                                                doesn't match your trek duration
                                            </p>
                                        </CardContent>
                                    </Card>
                                </div>
                            </AccordionContent>
                        </AccordionItem>
                    </Card>

                    {/* 7. Inclusions & Exclusions */}
                    <Card>
                        <AccordionItem value="inclusions" className="border-0">
                            <AccordionTrigger className="text-lg font-semibold px-6 py-4">
                                <div className="flex items-center space-x-3 text-left">
                                    <Users className="w-5 h-5 text-cyan-600" />
                                    <div>
                                        <div className="font-semibold">
                                            Inclusions & Exclusions
                                        </div>
                                        <div className="text-sm font-normal text-gray-500">
                                            What's included and excluded in the
                                            package
                                        </div>
                                    </div>
                                </div>
                            </AccordionTrigger>
                            <AccordionContent className="px-6 pb-6">
                                <div className="space-y-8">
                                    {hasFieldErrors("inclusions") && (
                                        <Alert className="border-red-200 bg-red-50">
                                            <AlertCircle className="h-4 w-4 text-red-600" />
                                            <AlertDescription className="text-red-800">
                                                {getFieldErrors(
                                                    "inclusions"
                                                ).map((error, index) => (
                                                    <p key={index}>{error}</p>
                                                ))}
                                            </AlertDescription>
                                        </Alert>
                                    )}

                                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                                        {/* Inclusions Card */}
                                        <Card className="border-2 border-green-200 bg-gradient-to-br from-green-50 to-emerald-50">
                                            <CardHeader>
                                                <CardTitle className="text-lg text-green-800 flex items-center gap-2">
                                                    ✅ Inclusions
                                                </CardTitle>
                                            </CardHeader>
                                            <CardContent>
                                                <div className="space-y-4">
                                                    <div className="space-y-3">
                                                        {[
                                                            "Professional Guide",
                                                            "All Meals",
                                                            "Permits & Fees",
                                                            "Medical Kit",
                                                            "Tent & Sleeping Bag",
                                                            "Transportation",
                                                            "Travel Insurance",
                                                        ].map((item) => (
                                                            <div
                                                                key={item}
                                                                className="flex items-center space-x-2"
                                                            >
                                                                <Checkbox
                                                                    id={`inc-${item
                                                                        .toLowerCase()
                                                                        .replace(
                                                                            /\s+/g,
                                                                            ""
                                                                        )}`}
                                                                    checked={formData.selectedInclusions.includes(
                                                                        item
                                                                    )}
                                                                    onCheckedChange={(
                                                                        checked
                                                                    ) =>
                                                                        toggleInclusion(
                                                                            item,
                                                                            checked
                                                                        )
                                                                    }
                                                                />
                                                                <Label
                                                                    htmlFor={`inc-${item
                                                                        .toLowerCase()
                                                                        .replace(
                                                                            /\s+/g,
                                                                            ""
                                                                        )}`}
                                                                    className="text-sm"
                                                                >
                                                                    {item}
                                                                </Label>
                                                            </div>
                                                        ))}
                                                    </div>

                                                    <div className="pt-4 border-t border-green-200">
                                                        <Label className="text-sm font-semibold text-green-800">
                                                            Add Custom Inclusion
                                                        </Label>
                                                        <div className="flex gap-2 mt-2">
                                                            <Input
                                                                placeholder="Enter custom inclusion"
                                                                className="border-2 focus:border-green-500"
                                                                onKeyPress={(
                                                                    e
                                                                ) => {
                                                                    if (
                                                                        e.key ===
                                                                        "Enter"
                                                                    ) {
                                                                        e.preventDefault();
                                                                        addCustomInclusion(
                                                                            e
                                                                                .target
                                                                                .value
                                                                        );
                                                                        e.target.value =
                                                                            "";
                                                                    }
                                                                }}
                                                            />
                                                            <Button
                                                                type="button"
                                                                className="bg-green-600 hover:bg-green-700"
                                                                onClick={(
                                                                    e
                                                                ) => {
                                                                    const input =
                                                                        e.target.parentElement.querySelector(
                                                                            "input"
                                                                        );
                                                                    addCustomInclusion(
                                                                        input.value
                                                                    );
                                                                    input.value =
                                                                        "";
                                                                }}
                                                            >
                                                                Add
                                                            </Button>
                                                        </div>
                                                        <div className="flex flex-wrap gap-2 mt-3">
                                                            {formData.customInclusions.map(
                                                                (
                                                                    item,
                                                                    index
                                                                ) => (
                                                                    <Badge
                                                                        key={
                                                                            index
                                                                        }
                                                                        className="bg-green-100 text-green-800 flex items-center gap-1"
                                                                    >
                                                                        {item}
                                                                        <X
                                                                            className="h-3 w-3 cursor-pointer"
                                                                            onClick={() =>
                                                                                removeCustomInclusion(
                                                                                    index
                                                                                )
                                                                            }
                                                                        />
                                                                    </Badge>
                                                                )
                                                            )}
                                                        </div>
                                                    </div>
                                                </div>
                                            </CardContent>
                                        </Card>

                                        {/* Exclusions Card */}
                                        <Card className="border-2 border-red-200 bg-gradient-to-br from-red-50 to-pink-50">
                                            <CardHeader>
                                                <CardTitle className="text-lg text-red-800 flex items-center gap-2">
                                                    ❌ Exclusions
                                                </CardTitle>
                                            </CardHeader>
                                            <CardContent>
                                                <div className="space-y-4">
                                                    <div>
                                                        <Label className="text-sm font-semibold text-red-800">
                                                            Add Custom Exclusion
                                                        </Label>
                                                        <div className="flex gap-2 mt-2">
                                                            <Input
                                                                placeholder="Enter custom exclusion"
                                                                className="border-2 focus:border-red-500"
                                                                onKeyPress={(
                                                                    e
                                                                ) => {
                                                                    if (
                                                                        e.key ===
                                                                        "Enter"
                                                                    ) {
                                                                        e.preventDefault();
                                                                        addCustomExclusion(
                                                                            e
                                                                                .target
                                                                                .value
                                                                        );
                                                                        e.target.value =
                                                                            "";
                                                                    }
                                                                }}
                                                            />
                                                            <Button
                                                                type="button"
                                                                className="bg-red-600 hover:bg-red-700"
                                                                onClick={(
                                                                    e
                                                                ) => {
                                                                    const input =
                                                                        e.target.parentElement.querySelector(
                                                                            "input"
                                                                        );
                                                                    addCustomExclusion(
                                                                        input.value
                                                                    );
                                                                    input.value =
                                                                        "";
                                                                }}
                                                            >
                                                                Add
                                                            </Button>
                                                        </div>
                                                        <div className="flex flex-wrap gap-2 mt-3">
                                                            {formData.customExclusions.map(
                                                                (
                                                                    item,
                                                                    index
                                                                ) => (
                                                                    <Badge
                                                                        key={
                                                                            index
                                                                        }
                                                                        className="bg-red-100 text-red-800 flex items-center gap-1"
                                                                    >
                                                                        {item}
                                                                        <X
                                                                            className="h-3 w-3 cursor-pointer"
                                                                            onClick={() =>
                                                                                removeCustomExclusion(
                                                                                    index
                                                                                )
                                                                            }
                                                                        />
                                                                    </Badge>
                                                                )
                                                            )}
                                                        </div>
                                                    </div>
                                                </div>
                                            </CardContent>
                                        </Card>
                                    </div>
                                </div>
                            </AccordionContent>
                        </AccordionItem>
                    </Card>

                    {/* 8. Activities Offered */}
                    <Card>
                        <AccordionItem value="activities" className="border-0">
                            <AccordionTrigger className="text-lg font-semibold px-6 py-4">
                                <div className="flex items-center space-x-3 text-left">
                                    <Activity className="w-5 h-5 text-emerald-600" />
                                    <div>
                                        <div className="font-semibold">
                                            Activities Offered
                                        </div>
                                        <div className="text-sm font-normal text-gray-500">
                                            Adventure activities and experiences
                                            available
                                        </div>
                                    </div>
                                </div>
                            </AccordionTrigger>
                            <AccordionContent className="px-6 pb-6">
                                <ActivitySelector
                                    selectedActivities={
                                        formData.activities || []
                                    }
                                    onChange={(activities) =>
                                        handleInputChange(
                                            "activities",
                                            activities
                                        )
                                    }
                                />
                            </AccordionContent>
                        </AccordionItem>
                    </Card>

                    {/* 9. Media & Visuals */}
                    <Card>
                        <AccordionItem value="media" className="border-0">
                            <AccordionTrigger className="text-lg font-semibold px-6 py-4">
                                <div className="flex items-center space-x-3 text-left">
                                    <Camera className="w-5 h-5 text-pink-600" />
                                    <div>
                                        <div className="font-semibold">
                                            Media & Visuals
                                        </div>
                                        <div className="text-sm font-normal text-gray-500">
                                            Photos and videos (Premium feature
                                            for videos)
                                        </div>
                                    </div>
                                </div>
                            </AccordionTrigger>
                            <AccordionContent className="px-6 pb-6">
                                <div className="space-y-8">
                                    <Alert className="border-amber-200 bg-amber-50">
                                        <AlertCircle className="h-4 w-4" />
                                        <AlertDescription>
                                            <strong>Image Limit:</strong>{" "}
                                            Maximum 5 images allowed. Upload
                                            high-quality photos that showcase
                                            your trek.
                                        </AlertDescription>
                                    </Alert>

                                    <div>
                                        <Label className="text-sm font-semibold text-gray-700">
                                            Trek Images (Max 5) *
                                        </Label>
                                        <div className="mt-2 space-y-4">
                                            {/* Image Upload Area */}
                                            <div
                                                className="border-2 border-dashed border-pink-300 rounded-xl p-8 text-center hover:border-pink-500 transition-colors bg-gradient-to-br from-pink-50 to-rose-50"
                                                onDragOver={(e) => {
                                                    e.preventDefault();
                                                    e.currentTarget.classList.add(
                                                        "border-pink-500",
                                                        "bg-pink-100"
                                                    );
                                                }}
                                                onDragLeave={(e) => {
                                                    e.preventDefault();
                                                    e.currentTarget.classList.remove(
                                                        "border-pink-500",
                                                        "bg-pink-100"
                                                    );
                                                }}
                                                onDrop={(e) => {
                                                    e.preventDefault();
                                                    e.currentTarget.classList.remove(
                                                        "border-pink-500",
                                                        "bg-pink-100"
                                                    );
                                                    const files = Array.from(
                                                        e.dataTransfer.files
                                                    );
                                                    handleTrekImagesDrop(files);
                                                }}
                                            >
                                                <Camera className="h-12 w-12 mx-auto text-pink-500 mb-4" />
                                                <p className="text-sm font-medium text-gray-700">
                                                    Upload trek images (Maximum
                                                    5)
                                                </p>
                                                <p className="text-xs text-gray-500 mt-1">
                                                    PNG, JPG up to 5MB each •
                                                    Drag & drop supported
                                                </p>
                                                <input
                                                    type="file"
                                                    multiple
                                                    accept="image/*"
                                                    onChange={
                                                        handleTrekImagesSelect
                                                    }
                                                    className="hidden"
                                                    id="trek-images-input"
                                                    disabled={
                                                        formData.media.length >=
                                                        5
                                                    }
                                                />
                                                <label
                                                    htmlFor="trek-images-input"
                                                    className="mt-4 inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-pink-600 text-white hover:bg-pink-700 h-10 px-4 py-2 disabled:bg-gray-400 disabled:cursor-not-allowed cursor-pointer"
                                                >
                                                    {formData.media.length >= 5
                                                        ? "Maximum Images Reached"
                                                        : "Choose Images"}
                                                </label>
                                            </div>

                                            {/* Selected Images Preview */}
                                            {formData.media.length > 0 && (
                                                <div className="space-y-3">
                                                    <h4 className="text-sm font-medium text-gray-700">
                                                        Selected Images (
                                                        {formData.media.length}
                                                        /5)
                                                    </h4>
                                                    <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
                                                        {formData.media.map(
                                                            (image, index) => (
                                                                <div
                                                                    key={index}
                                                                    className="relative group"
                                                                >
                                                                    <div className="aspect-square rounded-lg overflow-hidden border-2 border-gray-200">
                                                                        <img
                                                                            src={
                                                                                image.preview
                                                                            }
                                                                            alt={`Trek image ${
                                                                                index +
                                                                                1
                                                                            }`}
                                                                            className="w-full h-full object-cover"
                                                                        />
                                                                    </div>
                                                                    <button
                                                                        type="button"
                                                                        onClick={() =>
                                                                            handleRemoveTrekImage(
                                                                                index
                                                                            )
                                                                        }
                                                                        className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 hover:bg-red-600 transition-colors opacity-0 group-hover:opacity-100"
                                                                    >
                                                                        <X className="h-3 w-3" />
                                                                    </button>
                                                                    <div className="mt-1 text-xs text-gray-500 truncate">
                                                                        {
                                                                            image
                                                                                .file
                                                                                .name
                                                                        }
                                                                    </div>
                                                                </div>
                                                            )
                                                        )}
                                                    </div>
                                                </div>
                                            )}

                                            {/* Validation Error */}
                                            {hasFieldErrors("media") && (
                                                <p className="text-red-500 text-xs">
                                                    {getFieldErrors("media")[0]}
                                                </p>
                                            )}
                                        </div>
                                    </div>

                                    <Card className="border-2 border-purple-200 bg-gradient-to-br from-purple-50 to-indigo-50">
                                        <CardHeader>
                                            <CardTitle className="text-lg flex items-center gap-2">
                                                <CheckCircle className="h-5 w-5 text-purple-600" />
                                                Trek Video (Premium Feature)
                                            </CardTitle>
                                        </CardHeader>
                                        <CardContent>
                                            <div className="flex items-center justify-between p-4 bg-white rounded-lg border-2 border-purple-200">
                                                <div className="flex items-center gap-3">
                                                    <Shield className="h-5 w-5 text-purple-600" />
                                                    <div>
                                                        <p className="font-medium text-gray-700">
                                                            Add Trek Reel (30-60
                                                            seconds)
                                                        </p>
                                                        <p className="text-sm text-gray-500">
                                                            Showcase your trek
                                                            with a short video
                                                        </p>
                                                    </div>
                                                </div>
                                                <Button className="bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700">
                                                    <CheckCircle className="h-4 w-4 mr-2" />
                                                    Upgrade to Premium
                                                </Button>
                                            </div>
                                        </CardContent>
                                    </Card>
                                </div>
                            </AccordionContent>
                        </AccordionItem>
                    </Card>

                    {/* 10. Trek Policies */}
                    <Card>
                        <AccordionItem value="policies" className="border-0">
                            <AccordionTrigger className="text-lg font-semibold px-6 py-4">
                                <div className="flex items-center space-x-3 text-left">
                                    <Shield className="w-5 h-5 text-red-600" />
                                    <div>
                                        <div className="font-semibold">
                                            Trek Policies
                                        </div>
                                        <div className="text-sm font-normal text-gray-500">
                                            Rules, safety protocols and
                                            cancellation policy
                                        </div>
                                    </div>
                                </div>
                            </AccordionTrigger>
                            <AccordionContent className="px-6 pb-6">
                                <div className="space-y-6">
                                    {/* Cancellation Policy Selection */}
                                    <div>
                                        <Label className="text-sm font-semibold text-gray-700 mb-3 block">
                                            Cancellation Policy *
                                        </Label>

                                        {policiesLoading ? (
                                            <div className="flex items-center space-x-2 text-gray-500">
                                                <Loader2 className="h-4 w-4 animate-spin" />
                                                <span>
                                                    Loading cancellation
                                                    policies...
                                                </span>
                                            </div>
                                        ) : cancellationPolicies.length ===
                                          0 ? (
                                            <div className="text-gray-500 text-sm">
                                                No cancellation policies
                                                available
                                            </div>
                                        ) : (
                                            <div className="space-y-3">
                                                {cancellationPolicies.map(
                                                    (policy) => (
                                                        <div
                                                            key={policy.id}
                                                            className="flex items-start space-x-3 p-3 border border-gray-200 rounded-lg hover:border-blue-300 transition-colors cursor-pointer"
                                                            onClick={() =>
                                                                handleSelectChange(
                                                                    "cancellation_policy_id",
                                                                    policy.id
                                                                )
                                                            }
                                                        >
                                                            <input
                                                                type="radio"
                                                                id={`policy-${policy.id}`}
                                                                name="cancellation_policy"
                                                                value={
                                                                    policy.id
                                                                }
                                                                checked={
                                                                    formData.cancellation_policy_id ===
                                                                    policy.id
                                                                }
                                                                onChange={() =>
                                                                    handleSelectChange(
                                                                        "cancellation_policy_id",
                                                                        policy.id
                                                                    )
                                                                }
                                                                className="mt-1 h-4 w-4 text-blue-600 border-gray-300 focus:ring-blue-500"
                                                            />
                                                            <label
                                                                htmlFor={`policy-${policy.id}`}
                                                                className="flex-1 cursor-pointer"
                                                            >
                                                                <div className="font-medium text-gray-900">
                                                                    {
                                                                        policy.title
                                                                    }
                                                                </div>
                                                                {policy.description && (
                                                                    <div className="text-sm text-gray-500 mt-1">
                                                                        {
                                                                            policy.description
                                                                        }
                                                                    </div>
                                                                )}
                                                            </label>
                                                        </div>
                                                    )
                                                )}
                                            </div>
                                        )}

                                        {hasFieldErrors(
                                            "cancellation_policy_id"
                                        ) && (
                                            <p className="text-red-500 text-xs mt-2">
                                                {
                                                    getFieldErrors(
                                                        "cancellation_policy_id"
                                                    )[0]
                                                }
                                            </p>
                                        )}
                                    </div>

                                    {/* Trekking Rules */}
                                    <div>
                                        <Label
                                            htmlFor="trekkingRules"
                                            className="text-sm font-semibold text-gray-700"
                                        >
                                            Trekking Rules *
                                        </Label>
                                        <Textarea
                                            id="trekkingRules"
                                            placeholder="Enter trekking rules and guidelines that participants must follow..."
                                            value={formData.trekking_rules}
                                            onChange={(e) =>
                                                handleInputChange(
                                                    "trekking_rules",
                                                    e.target.value
                                                )
                                            }
                                            rows={4}
                                            className="mt-2"
                                        />
                                        {hasFieldErrors("trekking_rules") && (
                                            <p className="text-red-500 text-xs mt-1">
                                                {
                                                    getFieldErrors(
                                                        "trekking_rules"
                                                    )[0]
                                                }
                                            </p>
                                        )}
                                    </div>

                                    {/* Emergency Protocols/Safety Notes */}
                                    <div>
                                        <Label
                                            htmlFor="emergencyProtocols"
                                            className="text-sm font-semibold text-gray-700"
                                        >
                                            Emergency Protocols/Safety Notes *
                                        </Label>
                                        <Textarea
                                            id="emergencyProtocols"
                                            placeholder="Enter emergency protocols, safety guidelines, and contact information..."
                                            value={formData.emergency_protocols}
                                            onChange={(e) =>
                                                handleInputChange(
                                                    "emergency_protocols",
                                                    e.target.value
                                                )
                                            }
                                            rows={4}
                                            className="mt-2"
                                        />
                                        {hasFieldErrors(
                                            "emergency_protocols"
                                        ) && (
                                            <p className="text-red-500 text-xs mt-1">
                                                {
                                                    getFieldErrors(
                                                        "emergency_protocols"
                                                    )[0]
                                                }
                                            </p>
                                        )}
                                    </div>

                                    {/* Organizer Notes */}
                                    <div>
                                        <Label
                                            htmlFor="organizerNotes"
                                            className="text-sm font-semibold text-gray-700"
                                        >
                                            Organizer Notes (Optional)
                                        </Label>
                                        <Textarea
                                            id="organizerNotes"
                                            placeholder="Enter any additional notes, special instructions, or information for organizers..."
                                            value={formData.organizer_notes}
                                            onChange={(e) =>
                                                handleInputChange(
                                                    "organizer_notes",
                                                    e.target.value
                                                )
                                            }
                                            rows={3}
                                            className="mt-2"
                                        />
                                        {hasFieldErrors("organizer_notes") && (
                                            <p className="text-red-500 text-xs mt-1">
                                                {
                                                    getFieldErrors(
                                                        "organizer_notes"
                                                    )[0]
                                                }
                                            </p>
                                        )}
                                    </div>
                                </div>
                            </AccordionContent>
                        </AccordionItem>
                    </Card>

                    {/* 11. Review & Publish */}
                    <Card>
                        <AccordionItem value="review" className="border-0">
                            <AccordionTrigger className="text-lg font-semibold px-6 py-4">
                                <div className="flex items-center space-x-3 text-left">
                                    <Eye className="w-5 h-5 text-gray-600" />
                                    <div>
                                        <div className="font-semibold">
                                            Review & Publish
                                        </div>
                                        <div className="text-sm font-normal text-gray-500">
                                            Final review and publishing options
                                        </div>
                                    </div>
                                </div>
                            </AccordionTrigger>
                            <AccordionContent className="px-6 pb-6">
                                <div className="space-y-8">
                                    <Alert className="border-blue-200 bg-blue-50">
                                        <Eye className="h-4 w-4" />
                                        <AlertDescription>
                                            <strong>Final Review:</strong>{" "}
                                            Please review all the information
                                            before publishing your trek. Make
                                            sure all required fields are
                                            completed.
                                        </AlertDescription>
                                    </Alert>

                                    {/* Form Progress */}
                                    <Card className="border-2 border-blue-200 bg-gradient-to-br from-blue-50 to-indigo-50">
                                        <CardHeader>
                                            <CardTitle className="text-lg flex items-center gap-2">
                                                <CheckCircle className="h-5 w-5 text-blue-600" />
                                                Form Completion Progress
                                            </CardTitle>
                                        </CardHeader>
                                        <CardContent>
                                            <div className="space-y-4">
                                                <div className="flex items-center justify-between">
                                                    <span className="text-sm font-medium">
                                                        Overall Progress
                                                    </span>
                                                    <span className="text-sm font-bold text-blue-600">
                                                        {formProgress}%
                                                    </span>
                                                </div>
                                                <div className="w-full bg-gray-200 rounded-full h-2">
                                                    <div
                                                        className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                                                        style={{
                                                            width: `${formProgress}%`,
                                                        }}
                                                    ></div>
                                                </div>
                                            </div>
                                        </CardContent>
                                    </Card>

                                    {/* Summary */}
                                    <Card className="border-2 border-gray-200 bg-gradient-to-br from-gray-50 to-slate-50">
                                        <CardHeader>
                                            <CardTitle className="text-lg flex items-center gap-2">
                                                <FileText className="h-5 w-5 text-gray-600" />
                                                Trek Summary
                                            </CardTitle>
                                        </CardHeader>
                                        <CardContent>
                                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                                                <div>
                                                    <p>
                                                        <strong>Name:</strong>{" "}
                                                        {formData.title ||
                                                            "Not set"}
                                                    </p>
                                                    <p>
                                                        <strong>
                                                            Destination:
                                                        </strong>{" "}
                                                        {destinations.find(
                                                            (d) =>
                                                                d.id ===
                                                                formData.destination_id
                                                        )?.name || "Not set"}
                                                    </p>
                                                    <p>
                                                        <strong>
                                                            Duration:
                                                        </strong>{" "}
                                                        {formData.duration_days
                                                            ? `${formData.duration_days} days, ${formData.duration_nights} nights`
                                                            : "Not set"}
                                                    </p>
                                                    <p>
                                                        <strong>Price:</strong>{" "}
                                                        {formData.base_price
                                                            ? `₹${formData.base_price}`
                                                            : "Not set"}
                                                    </p>
                                                </div>
                                                <div>
                                                    <p>
                                                        <strong>Type:</strong>{" "}
                                                        {formData.trek_type ||
                                                            "Not set"}
                                                    </p>
                                                    <p>
                                                        <strong>
                                                            Difficulty:
                                                        </strong>{" "}
                                                        {formData.difficulty ||
                                                            "Not set"}
                                                    </p>
                                                    <p>
                                                        <strong>
                                                            Max Participants:
                                                        </strong>{" "}
                                                        {formData.max_participants ||
                                                            "Not set"}
                                                    </p>
                                                    <p>
                                                        <strong>Stages:</strong>{" "}
                                                        {formData.trekStages
                                                            ?.length || 0}{" "}
                                                        stages
                                                    </p>
                                                </div>
                                            </div>
                                        </CardContent>
                                    </Card>
                                </div>
                            </AccordionContent>
                        </AccordionItem>
                    </Card>
                </Accordion>

                {/* Form Actions */}
                <div className="flex justify-between items-center pt-6 border-t">
                    <Button
                        type="button"
                        variant="outline"
                        onClick={() => navigate("/vendor/treks")}
                    >
                        Cancel
                    </Button>
                </div>
            </form>

            {/* Floating Action Buttons */}
            <div className="fixed bottom-6 right-6 z-50">
                {/* Floating Create/Update Button */}
                <Button
                    onClick={(e) => {
                        e.preventDefault();
                        handleSubmit(e);
                    }}
                    disabled={loading}
                    className="shadow-lg hover:shadow-xl transition-all duration-200 min-w-[140px] h-12 rounded-full md:min-w-[140px] min-w-[120px]"
                    size="lg"
                >
                    {loading ? (
                        <div className="flex items-center">
                            <Loader2 className="w-5 h-5 animate-spin mr-2" />
                            <span className="hidden md:inline">
                                {mode === "create"
                                    ? "Creating..."
                                    : "Updating..."}
                            </span>
                            <span className="md:hidden">
                                {mode === "create" ? "Create" : "Update"}
                            </span>
                        </div>
                    ) : (
                        <div className="flex items-center">
                            <Save className="w-5 h-5 mr-2" />
                            <span className="hidden md:inline">
                                {mode === "create"
                                    ? "Create Trek"
                                    : "Update Trek"}
                            </span>
                            <span className="md:hidden">
                                {mode === "create" ? "Create" : "Update"}
                            </span>
                        </div>
                    )}
                </Button>
            </div>

            {/* Floating Progress Indicator */}
            {loading && (
                <div className="fixed top-4 right-4 z-50">
                    <div className="bg-white rounded-lg shadow-lg p-4 border">
                        <div className="flex items-center space-x-3">
                            <Loader2 className="w-5 h-5 animate-spin text-blue-600" />
                            <div>
                                <p className="text-sm font-medium text-gray-900">
                                    {mode === "create"
                                        ? "Creating Trek..."
                                        : "Updating Trek..."}
                                </p>
                                <p className="text-xs text-gray-500">
                                    Please wait while we process your request
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default TrekForm;
